{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/others/notifications/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Installation"},{"depth":2,"value":"Demo"},{"depth":2,"value":"Usage"},{"depth":2,"value":"use-notifications hook"},{"depth":2,"value":"Notification props"},{"depth":2,"value":"Notifications container position"},{"depth":2,"value":"Limit and queue"},{"depth":2,"value":"Remove notifications from state and queue"},{"depth":2,"value":"Update notification"},{"depth":2,"value":"Auto close"},{"depth":2,"value":"React node in notification message"}],"frontmatter":{"title":"Notifications system","package":"@mantine/notifications","slug":"/others/notifications/","props":["NotificationsProvider"],"import":null,"docs":"others/notifications.mdx","source":"mantine-notifications/src","description":"Mantine notifications system","bundleSize":"@mantine/notifications","installation":"@mantine/notifications","pageTitle":"Mantine Notifications","license":"MIT","styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"order\": 1,\n  \"group\": \"Other packages\",\n  \"package\": \"@mantine/notifications\",\n  \"title\": \"Notifications system\",\n  \"slug\": \"/others/notifications/\",\n  \"props\": [\"NotificationsProvider\"],\n  \"source\": \"mantine-notifications/src\",\n  \"docs\": \"others/notifications.mdx\",\n  \"pageTitle\": \"Mantine Notifications\",\n  \"description\": \"Mantine notifications system\",\n  \"installation\": \"@mantine/notifications\",\n  \"bundleSize\": \"@mantine/notifications\",\n  \"license\": \"MIT\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"installation\"\n  }, \"Installation\"), mdx(\"p\", null, \"Package depends on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/react\"\n  }, \"react\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/react-dom\"\n  }, \"react-dom\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/@mantine/hooks\"\n  }, \"@mantine/hooks\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/@mantine/core\"\n  }, \"@mantine/core\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/react-jss\"\n  }, \"react-jss\"), \".\"), mdx(\"p\", null, \"Install with npm:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"npm install @mantine/notifications @mantine/core @mantine/hooks\\n\")), mdx(\"p\", null, \"Install with yarn:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"yarn add @mantine/notifications @mantine/core @mantine/hooks\\n\")), mdx(\"h2\", {\n    \"id\": \"demo\"\n  }, \"Demo\"), mdx(Demo, {\n    data: MantineNotificationsDemos.root,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Wrap your application with NotificationsProvider.\\n\", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Important:\"), \" if you use MantineProvider, NotificationsProvider must be placed inside:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { NotificationsProvider } from '@mantine/notifications';\\n\\nfunction YourApp() {\\n  return (\\n    <MantineProvider theme={yourTheme}>\\n      <NotificationsProvider>\\n        <App />\\n      </NotificationsProvider>\\n    </MantineProvider>\\n  );\\n}\\n\")), mdx(\"p\", null, \"Use use-notifications hook at any place in your application:\"), mdx(Demo, {\n    data: MantineNotificationsDemos.base,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"use-notifications-hook\"\n  }, \"use-notifications hook\"), mdx(\"p\", null, \"Hook returns object with properties:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"notifications\"), \" \\u2013 list of notifications that are currently displayed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"queue\"), \" \\u2013 list of notifications in queue\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"showNotification\"), \" \\u2013 adds given notification to notifications list or queue depending on current state and limit, returns notification id\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"updateNotification\"), \" \\u2013 updates notification with given id\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"hideNotification\"), \" \\u2013 removes notification with given id from notifications list and queue\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"clean\"), \" \\u2013 removes all notifications from notifications list and queue\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"cleanQueue\"), \" \\u2013 removes all notifications from queue\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function useNotifications(): {\\n  notifications: NotificationProps[];\\n  queue: NotificationProps[];\\n  showNotification(props: NotificationProps): string;\\n  updateNotification(id: string, props: NotificationProps): void;\\n  hideNotification(id: string): void;\\n  clean(): void;\\n  cleanQueue(): void;\\n};\\n\\ninterface NotificationProps {\\n  id?: string;\\n  color?: string;\\n  className?: string;\\n  style?: React.CSSProperties;\\n  icon?: React.ReactNode;\\n  title?: React.ReactNode;\\n  loading?: boolean;\\n  message: React.ReactNode;\\n  autoClose?: boolean | number;\\n  disallowClose?: boolean;\\n  onClose?(props: NotificationProps): void;\\n  onOpen?(props: NotificationProps): void;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"notification-props\"\n  }, \"Notification props\"), mdx(\"p\", null, \"Notification state item can have these properties:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"id\"), \" \\u2013 notification id, it is used to update adn remove notification, be default id generates randomly\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"disallowClose\"), \" \\u2013 removes close button, notification can be closed only programmatically\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"onClose\"), \" \\u2013 calls when notification is unmounted\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"onOpen\"), \" \\u2013 calls when notification is mounted\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"autoClose\"), \" \\u2013 defines timeout in ms on which notification will be automatically closed, use \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"false\"), \" to disable auto close\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"message\"), \" \\u2013 required notification body\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"color, icon, title, className, style, loading\"), \" \\u2013 props spread to \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/core/notification/\"\n  }, \"Notification\"), \" component\")), mdx(\"p\", null, \"All properties except \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"message\"), \" are optional.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const notifications = useNotifications();\\n\\n// Bare minimum \\u2013 message is required for all notifications\\nnotifications.showNotification({ message: 'Hello' });\\n\\n// All possible notification props\\nconst id = notifications.showNotification({\\n  id: 'hello-there',\\n  disallowClose: true,\\n  onClose: () => console.log('unmounted'),\\n  onOpen: () => console.log('mounted'),\\n  autoClose: 5000,\\n  title: \\\"You've been compromised\\\",\\n  message: 'Leave the building immediately',\\n  color: 'red',\\n  icon: <Cross1Icon />,\\n  className: 'my-notification-class',\\n  style: { backgroundColor: 'red' },\\n  loading: false,\\n});\\n\")), mdx(\"p\", null, \"Notifications preview (message prop used as children):\"), mdx(Demo, {\n    data: NotificationDemos.configurator,\n    configuratorProps: {\n      includeCode: false\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"notifications-container-position\"\n  }, \"Notifications container position\"), mdx(\"p\", null, \"NotificationsProvider renders notifications container with fixed position inside \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/portal/\"\n  }, \"Portal\"), \".\\nPosition cannot be changed per notification.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<NotificationsProvider position=\\\"top-right\\\" zIndex={2077}>\\n  <YourApp />\\n</NotificationsProvider>\\n\")), mdx(\"h2\", {\n    \"id\": \"limit-and-queue\"\n  }, \"Limit and queue\"), mdx(\"p\", null, \"NotificationsProvider uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-queue/\"\n  }, \"use-queue\"), \" hook to manage state.\\nYou can limit maximum amount of notifications that can be displayed by setting\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"limit\"), \" prop on NotificationsProvider:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<NotificationsProvider limit={5}>\\n  <YourApp />\\n</NotificationsProvider>\\n\")), mdx(\"p\", null, \"All notifications added after limit was reached will be added into queue\\nand displayed when notification from current state is closed.\"), mdx(Demo, {\n    data: MantineNotificationsDemos.limit,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"remove-notifications-from-state-and-queue\"\n  }, \"Remove notifications from state and queue\"), mdx(\"p\", null, \"To remove specific notification from state or queue use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hideNotification\"), \" handler:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const notifications = useNotifications();\\n\\nconst id = notifications.show({ message: 'Hello!' });\\nnotifications.hideNotification(id);\\n\")), mdx(\"p\", null, \"Use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"cleanQueue\"), \" handler to remove all notifications that are not currently displayed and\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clean\"), \" handler to remove all notifications from state and queue:\"), mdx(Demo, {\n    data: MantineNotificationsDemos.clean,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"update-notification\"\n  }, \"Update notification\"), mdx(\"p\", null, \"showNotification handler returns notification id, you can use it to update notification:\"), mdx(Demo, {\n    data: MantineNotificationsDemos.update,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"auto-close\"\n  }, \"Auto close\"), mdx(\"p\", null, \"You can configure auto close timeout in NotificationsProvider:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// All notifications will be closed automatically in 4000ms\\n<NotificationsProvider autoClose={4000}>\\n  <YourApp />\\n</NotificationsProvider>\\n\")), mdx(\"p\", null, \"Or in use-notifications hook handlers:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"notifications.showNotification({\\n  message: 'I will close in 500ms seconds',\\n  autoClose: 500,\\n});\\n\\nnotifications.updateNotification('hello', {\\n  id: 'hello',\\n  message: 'I will never close',\\n  autoClose: false,\\n});\\n\")), mdx(\"p\", null, \"showNotification and updateNotification have higher priority.\"), mdx(Demo, {\n    data: MantineNotificationsDemos.autoclose,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"react-node-in-notification-message\"\n  }, \"React node in notification message\"), mdx(\"p\", null, \"You can render any react node in notification message, for example, input or button.\\nCombine this option with other settings to achieve the desired behavior:\"), mdx(Demo, {\n    data: MantineNotificationsDemos.interactive,\n    mdxType: \"Demo\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"93b7fc57-c04b-5485-9465-4869eb599955","slug":"others/notifications","__params":{"slug":"others"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}