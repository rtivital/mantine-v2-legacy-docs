{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/others/rte/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Installation"},{"depth":2,"value":"Demo"},{"depth":2,"value":"Usage"},{"depth":2,"value":"Configure toolbar"},{"depth":2,"value":"Images and videos embeds"},{"depth":2,"value":"Images upload"},{"depth":2,"value":"Keyboard shortcuts"},{"depth":2,"value":"Server side rendering"},{"depth":2,"value":"Usage with Next.js"}],"frontmatter":{"title":"Rich text editor","package":"@mantine/rte","slug":"/others/rte/","props":["RichTextEditor"],"import":"import { RichTextEditor } from '@mantine/rte';","docs":"others/rte.mdx","source":"mantine-rte/src","description":"Quill based rich text editor","bundleSize":"@mantine/rte","installation":"@mantine/rte","pageTitle":null,"license":"MIT","styles":["RichTextEditor"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"Other packages\",\n  \"package\": \"@mantine/rte\",\n  \"title\": \"Rich text editor\",\n  \"order\": 1,\n  \"slug\": \"/others/rte/\",\n  \"description\": \"Quill based rich text editor\",\n  \"props\": [\"RichTextEditor\"],\n  \"import\": \"import { RichTextEditor } from '@mantine/rte';\",\n  \"source\": \"mantine-rte/src\",\n  \"docs\": \"others/rte.mdx\",\n  \"installation\": \"@mantine/rte\",\n  \"bundleSize\": \"@mantine/rte\",\n  \"license\": \"MIT\",\n  \"styles\": [\"RichTextEditor\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"installation\"\n  }, \"Installation\"), mdx(\"p\", null, \"Package has peer dependencies: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/react\"\n  }, \"react\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/react-dom\"\n  }, \"react-dom\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/@mantine/hooks\"\n  }, \"@mantine/hooks\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/@mantine/core\"\n  }, \"@mantine/core\"), \":.\"), mdx(\"p\", null, \"Install with npm:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"npm install @mantine/rte @mantine/core @mantine/hooks\\n\")), mdx(\"p\", null, \"Install with yarn:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-sh\"\n  }, \"yarn add @mantine/rte @mantine/core @mantine/hooks\\n\")), mdx(\"h2\", {\n    \"id\": \"demo\"\n  }, \"Demo\"), mdx(Demo, {\n    data: RichTextDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" props are required for component to work.\\nNote that though component is controlled you cannot force value (limitation of Quill.js library).\"), mdx(Demo, {\n    data: RichTextDemos.simple,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"configure-toolbar\"\n  }, \"Configure toolbar\"), mdx(\"p\", null, \"RichTextEditor supports these controls in toolbar:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"bold\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"strike\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"italic\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"underline\"), \" \\u2013 general inline formatting\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"clean\"), \" \\u2013 removes all inline formatting\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"h1\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"h2\"), \", ..., \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"h6\"), \" \\u2013 headings, in default toolbar only h1-h4 headings are displayed\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"link\"), \" \\u2013 link editor\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"blockquote\"), \" \\u2013 blockquote\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sub\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sup\"), \" \\u2013 super and sub scripts\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"video\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"image\"), \" \\u2013 video and image embeds\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"unorderedList\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"orderedList\"), \" \\u2013 ul and ol tags\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"alignCenter\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"alignLeft\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"alignRight\"), \" \\u2013 controls text-align\")), mdx(\"p\", null, \"You can add, remove and configure controls arrangement in toolbar with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"controls\"), \" prop:\"), mdx(Demo, {\n    data: RichTextDemos.toolbar,\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"To configure sticky toolbar properties set following props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"sticky\"), \" \\u2013 set to false to make toolbar stay at the top\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"stickyOffset\"), \" \\u2013 top property, used with sticky position, use it to offset elements with fixed position, for example, Mantine docs website has 60px header, in this case you should set stickyOffset to 60\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Toolbar stays at the top\\n<RichTextEditor sticky={false} />\\n\\n// Toolbar position is set to sticky with top: 40px\\n<RichTextEditor stickyOffset={40} />\\n\")), mdx(\"h2\", {\n    \"id\": \"images-and-videos-embeds\"\n  }, \"Images and videos embeds\"), mdx(Demo, {\n    data: RichTextDemos.embeds,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"images-upload\"\n  }, \"Images upload\"), mdx(\"p\", null, \"RichTextEditor will handle images upload in following situations:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Image button click in toolbar\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Image was pasted from clipboard into editor\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Image was dropped into editor\")), mdx(\"p\", null, \"To set up images upload add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onImageUpload\"), \" function:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { RichTextEditor } from '@mantine/rte';\\n\\n// Example with imgbb.com, usually you would use similar logic to upload to S3 like storages\\n// Function must return a promise that resolves with uploaded image url\\n// After promise is resolved blurred image placeholder with be replaced with uploaded\\nconst handleImageUpload = (file: File): Promise<string> =>\\n  new Promise((resolve, reject) => {\\n    const formData = new FormData();\\n    formData.append('image', file);\\n\\n    fetch('https://api.imgbb.com/1/upload?key=api_key', {\\n      method: 'POST',\\n      body: formData,\\n    })\\n      .then((response) => response.json())\\n      .then((result) => resolve(result.data.url))\\n      .catch(() => reject(new Error('Upload failed')));\\n  });\\n\\nfunction Demo() {\\n  const [value, onChange] = useState('');\\n  return <RichTextEditor value={value} onChange={onChange} onImageUpload={handleImageUpload} />;\\n}\\n\")), mdx(\"p\", null, mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"Important!\"), \" If you do not provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onImageUpload\"), \" all images will be converted to\\nbase64 format. In most cases this is not a valid option to store images so make sure you provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onImageUpload\"), \"\\nif you are planning to use images.\"), mdx(\"h2\", {\n    \"id\": \"keyboard-shortcuts\"\n  }, \"Keyboard shortcuts\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\u2318 + B\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ctrl + B\"), \" \\u2013 toggle bold format in current selection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\u2318 + I\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ctrl + I\"), \" \\u2013 toggle italic format in current selection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\u2318 + U\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ctrl + U\"), \" \\u2013 toggle underline format in current selection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\u2318 + K\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ctrl + K\"), \" \\u2013 add link to current selection\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"\\u2318 + option + 1\"), \" / \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Ctrl + Alt + 1\"), \" \\u2013 toggle heading at current line, valid for 1-6 headings\")), mdx(\"h2\", {\n    \"id\": \"server-side-rendering\"\n  }, \"Server side rendering\"), mdx(\"p\", null, \"Quill does not support server side rendering as it relies on browser API.\\nTo make component work on server you will need to create a wrapper component with additional checks.\"), mdx(\"p\", null, \"General strategy:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Create a separate component which will load RichTextEditor only in browser\\nimport React from 'react';\\nimport type { RichTextEditorProps } from '@mantine/rte';\\n\\nexport function RichText(props: RichTextEditorProps) {\\n  if (typeof window !== 'undefined') {\\n    // eslint-disable-next-line import/extensions, global-require\\n    const { RichTextEditor } = require('@mantine/rte');\\n    return <RichTextEditor {...props} />;\\n  }\\n\\n  // Render anything as fallback on server, e.g. loader or html content without editor\\n  return null;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"usage-with-nextjs\"\n  }, \"Usage with Next.js\"), mdx(\"p\", null, \"To make component work with Next.js use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://nextjs.org/docs/advanced-features/dynamic-import\"\n  }, \"dynamic module\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// RichText.tsx in your components folder\\nimport dynamic from 'next/dynamic';\\n\\nexport default dynamic(() => import('@mantine/rte'), {\\n  // Disable during server side rendering\\n  ssr: false,\\n\\n  // Render anything as fallback on server, e.g. loader or html content without editor\\n  loader: () => null,\\n});\\n\")), mdx(\"p\", null, \"Then when you want to use RichTextEditor import your component instead:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import RichTextEditor from '../components/RichText';\\n\\nfunction MyPage() {\\n  return <RichTextEditor />;\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"86312378-d34a-59bb-ae22-4542ae723cb1","slug":"others/rte","__params":{"slug":"others"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}