{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/dates/calendar/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Controlled month"},{"depth":2,"value":"Year and month picker"},{"depth":2,"value":"Localization"},{"depth":2,"value":"Label format"},{"depth":2,"value":"Min and max dates"},{"depth":2,"value":"Exclude dates"},{"depth":2,"value":"Add styles to days"},{"depth":3,"value":"Modifiers"},{"depth":3,"value":"Styles based on date"},{"depth":3,"value":"Styles based on modifiers"},{"depth":2,"value":"Customize with styles API"},{"depth":2,"value":"Accessibility and usability"}],"frontmatter":{"title":"Calendar","package":"@mantine/dates","slug":"/dates/calendar/","props":["Calendar"],"import":"import { Calendar } from '@mantine/dates';","docs":"dates/Calendar.mdx","source":"mantine-dates/src/components/Calendar/Calendar.tsx","description":"Display calendar with selected date","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["Calendar"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-dates\",\n  \"package\": \"@mantine/dates\",\n  \"title\": \"Calendar\",\n  \"order\": 1,\n  \"slug\": \"/dates/calendar/\",\n  \"description\": \"Display calendar with selected date\",\n  \"props\": [\"Calendar\"],\n  \"import\": \"import { Calendar } from '@mantine/dates';\",\n  \"source\": \"mantine-dates/src/components/Calendar/Calendar.tsx\",\n  \"docs\": \"dates/Calendar.mdx\",\n  \"styles\": [\"Calendar\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Calendar component allows you either to show static calendar or to capture date input from user.\\nIf you need to capture date range use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dates/range-calendar/\"\n  }, \"RangeCalendar\"), \" component.\"), mdx(Demo, {\n    data: CalendarDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled-month\"\n  }, \"Controlled month\"), mdx(\"p\", null, \"You can control month that is currently displayed with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"month\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onMonthChange\"), \" props:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { Calendar } from '@mantine/dates';\\n\\nfunction Demo() {\\n  const [month, onMonthChange] = useState(new Date());\\n  return <Calendar month={month} onMonthChange={onMonthChange} />;\\n}\\n\")), mdx(\"p\", null, \"Alternatively you can set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialMonth\"), \" prop to set initial month in uncontrolled component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Calendar initialMonth={new Date()} />\\n\")), mdx(\"h2\", {\n    \"id\": \"year-and-month-picker\"\n  }, \"Year and month picker\"), mdx(\"p\", null, \"You can replace calendar label with year and month selects.\\nTo use this option provide props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"withSelect\"), \" \\u2013 replace label with month and year select\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yearsRange\"), \" \\u2013 years range that should be used to generate years select options\")), mdx(Demo, {\n    data: CalendarDemos.withSelect,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"localization\"\n  }, \"Localization\"), mdx(\"p\", null, \"All @mantine/dates components are built with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://day.js.org/\"\n  }, \"dayjs\"), \" library.\\nDefault locale is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"en\"), \", to change this follow \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://day.js.org/docs/en/i18n/loading-into-nodejs\"\n  }, \"dayjs localization guide\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// First import locale data\\nimport 'dayjs/locale/ru';\\n\")), mdx(\"p\", null, \"Then set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"locale\"), \" prop in component:\"), mdx(Demo, {\n    data: CalendarDemos.localization,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"label-format\"\n  }, \"Label format\"), mdx(\"p\", null, \"By default Calendar will display dates in human readable format.\\nTo change that you can provide \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://day.js.org/docs/en/display/format\"\n  }, \"dayjs\"), \" format string to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"labelFormat\"), \" prop:\"), mdx(Demo, {\n    data: CalendarDemos.format,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"min-and-max-dates\"\n  }, \"Min and max dates\"), mdx(\"p\", null, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minDate\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxDate\"), \" props to define minimum and maximum possible dates.\\nDates which are not included in available interval will be disabled:\"), mdx(Demo, {\n    data: CalendarDemos.boundaries,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"exclude-dates\"\n  }, \"Exclude dates\"), mdx(\"p\", null, \"To exclude dates set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"excludeDates\"), \" prop with function that receives date as an argument and returns\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if date should be disabled. For example, to disable weekends check if date day is 0 or 6:\"), mdx(Demo, {\n    data: CalendarDemos.exclude,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"add-styles-to-days\"\n  }, \"Add styles to days\"), mdx(\"p\", null, \"You can apply styles to any day with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dayStyle\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dayClassName\"), \" callbacks.\\nBoth functions receive two arguments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"date\"), \" \\u2013 date object which is used to render day\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"modifiers\"), \" \\u2013 modifiers that are applied to day\")), mdx(\"h3\", {\n    \"id\": \"modifiers\"\n  }, \"Modifiers\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"interface DayModifiers {\\n  /** Is date selected and is first or last in range? */\\n  selectedInRange: boolean;\\n\\n  /** Is date equal to value? */\\n  selected: boolean;\\n\\n  /** Based on minDate, maxDate, excludeDate and disableOutsideEvents props */\\n  disabled: boolean;\\n\\n  /** Is date is range? */\\n  inRange: boolean;\\n\\n  /** Is date first or last in given range? */\\n  firstInRange: boolean;\\n  lastInRange: boolean;\\n\\n  /** Is date Saturday or Sunday? */\\n  weekend: boolean;\\n\\n  /** Is date outside of given month? */\\n  outside: boolean;\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"styles-based-on-date\"\n  }, \"Styles based on date\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dayStyle\"), \" callback allows you to add inline styles to days.\\nFunction must return either styles object or null.\"), mdx(\"p\", null, \"In this example we will add red background to each Friday 13th based on date (first argument):\"), mdx(Demo, {\n    data: CalendarDemos.styles,\n    mdxType: \"Demo\"\n  }), mdx(\"h3\", {\n    \"id\": \"styles-based-on-modifiers\"\n  }, \"Styles based on modifiers\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dayClassName\"), \" callback allows you to add className to days.\\nFunction must return either className string or null.\"), mdx(\"p\", null, \"In this example we will hide all outside dates and change color of weekends based on modifiers (second argument):\"), mdx(Demo, {\n    data: CalendarDemos.modifiers,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"customize-with-styles-api\"\n  }, \"Customize with styles API\"), mdx(\"p\", null, \"You can customize any part of the calendar with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/theming/styles-api/\"\n  }, \"Styles API\"), \":\"), mdx(Demo, {\n    data: CalendarDemos.stylesApi,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"accessibility-and-usability\"\n  }, \"Accessibility and usability\"), mdx(\"p\", null, \"To make all component controls visible to screen reader set following props:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// When withSelect prop set to false\\n<Calendar\\n  withSelect={false}\\n  nextMonthLabel=\\\"Next month\\\" // -> aria-label for button that switches to next month\\n  previousMonthLabel=\\\"Previous month\\\" // -> aria-label for button that switches to previous month\\n/>\\n\\n// When withSelect prop set to true\\n<Calendar\\n  withSelect\\n  nextMonthLabel=\\\"Next month\\\" // -> aria-label for button that switches to next month\\n  previousMonthLabel=\\\"Previous month\\\" // -> aria-label for button that switches to previous month\\n  yearLabel=\\\"Select year\\\" // -> year select aria-label\\n  monthLabel=\\\"Select month\\\" // -> month select aria-label\\n/>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"3a28bcd7-9766-5637-a7ca-8be6a1ee2495","slug":"dates/calendar","__params":{"slug":"dates"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}