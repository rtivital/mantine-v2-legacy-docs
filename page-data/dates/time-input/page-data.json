{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/dates/time-input/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Controlled"},{"depth":2,"value":"With seconds"},{"depth":2,"value":"Input props"},{"depth":2,"value":"With icon"},{"depth":2,"value":"Invalid state and error"},{"depth":2,"value":"Disabled state"},{"depth":2,"value":"Get elementRef"},{"depth":2,"value":"Server side rendering"},{"depth":2,"value":"Accessibility"}],"frontmatter":{"title":"TimeInput","package":"@mantine/dates","slug":"/dates/time-input/","props":["TimeInput"],"import":"import { TimeInput } from '@mantine/dates';","docs":"dates/TimeInput.mdx","source":"mantine-dates/src/components/TimeInput/TimeInput.tsx","description":"Capture time input from user","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["TimeInput"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-dates\",\n  \"package\": \"@mantine/dates\",\n  \"title\": \"TimeInput\",\n  \"order\": 1,\n  \"slug\": \"/dates/time-input/\",\n  \"description\": \"Capture time input from user\",\n  \"props\": [\"TimeInput\"],\n  \"import\": \"import { TimeInput } from '@mantine/dates';\",\n  \"source\": \"mantine-dates/src/components/TimeInput/TimeInput.tsx\",\n  \"docs\": \"dates/TimeInput.mdx\",\n  \"styles\": [\"TimeInput\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(Demo, {\n    data: TimeInputDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { TimeInput } from '@mantine/dates';\\n\\nfunction Demo() {\\n  const [value, onChange] = useState(new Date());\\n  return <TimeInput value={value} onChange={onChange} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"with-seconds\"\n  }, \"With seconds\"), mdx(\"p\", null, \"To add seconds set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"withSeconds\"), \" prop:\"), mdx(Demo, {\n    data: TimeInputDemos.withSeconds,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"input-props\"\n  }, \"Input props\"), mdx(\"p\", null, \"Component supports all props from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/input/\"\n  }, \"Input\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/input-wrapper/\"\n  }, \"InputWrapper\"), \" components:\"), mdx(Demo, {\n    data: TimeInputDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"with-icon\"\n  }, \"With icon\"), mdx(\"p\", null, \"You can use any React node as icon:\"), mdx(Demo, {\n    data: TimeInputDemos.icon,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"invalid-state-and-error\"\n  }, \"Invalid state and error\"), mdx(Demo, {\n    data: TimeInputDemos.validation,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"disabled-state\"\n  }, \"Disabled state\"), mdx(Demo, {\n    data: TimeInputDemos.disabled,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"get-elementref\"\n  }, \"Get elementRef\"), mdx(\"p\", null, \"You can get hours input ref with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useRef } from 'react';\\n\\nfunction Demo() {\\n  const inputRef = useRef();\\n  return <TimeInput elementRef={inputRef} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"server-side-rendering\"\n  }, \"Server side rendering\"), mdx(\"p\", null, \"Component uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-id/\"\n  }, \"use-id\"), \" hook to generate unique ids and aria- attributes,\\nprovide static \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" prop to prevent props mismatch:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<TimeInput /> // -> random id generated both on client and server, props mismatch warning\\n<TimeInput id=\\\"my-time-input\\\" /> // -> id is static, no mismatches\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, \"Provide hours, minutes and seconds labels to make inputs visible to screen reader:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<TimeInput hoursLabel=\\\"Hours\\\" minutesLabel=\\\"Minutes\\\" seconds=\\\"Seconds\\\" />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"16b7bc85-8013-5edc-897d-2a9b38bee36d","slug":"dates/time-input","__params":{"slug":"dates"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}