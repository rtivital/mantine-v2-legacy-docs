{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/dates/month/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Localization"},{"depth":2,"value":"Range"},{"depth":2,"value":"Min and max dates"},{"depth":2,"value":"Exclude dates"},{"depth":2,"value":"Hide weekdays names"},{"depth":2,"value":"Add styles to days"},{"depth":3,"value":"Modifiers"},{"depth":3,"value":"Styles based on date"},{"depth":3,"value":"Styles based on modifiers"}],"frontmatter":{"title":"Month","package":"@mantine/dates","slug":"/dates/month/","props":["Month"],"import":"import { Month } from '@mantine/dates';","docs":"dates/Month.mdx","source":"mantine-dates/src/components/Month/Month.tsx","description":"Most basic date related component, displays given month with optional weekdays row","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["Month"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-dates\",\n  \"package\": \"@mantine/dates\",\n  \"title\": \"Month\",\n  \"order\": 1,\n  \"slug\": \"/dates/month/\",\n  \"description\": \"Most basic date related component, displays given month with optional weekdays row\",\n  \"props\": [\"Month\"],\n  \"import\": \"import { Month } from '@mantine/dates';\",\n  \"source\": \"mantine-dates/src/components/Month/Month.tsx\",\n  \"docs\": \"dates/Month.mdx\",\n  \"styles\": [\"Month\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Month is the most basic @mantine/dates component, it displays single month without any controls to change current month.\\nComponent is used as base for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dates/calendar/\"\n  }, \"Calendar\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/dates/date-picker/\"\n  }, \"DatePicker\"), \"\\nand other components. You can use Month to build custom date or date range pickers that are not included in @mantine/dates\\nbut in most cases other components will be more suitable in your application.\"), mdx(Demo, {\n    data: MonthDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"localization\"\n  }, \"Localization\"), mdx(\"p\", null, \"All @mantine/dates components are built with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://day.js.org/\"\n  }, \"dayjs\"), \" library.\\nDefault locale is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"en\"), \", to change this follow \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://day.js.org/docs/en/i18n/loading-into-nodejs\"\n  }, \"dayjs localization guide\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// First import locale data\\nimport 'dayjs/locale/ru';\\n\")), mdx(\"p\", null, \"Then set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"locale\"), \" prop in component:\"), mdx(Demo, {\n    data: MonthDemos.localization,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"range\"\n  }, \"Range\"), mdx(\"p\", null, \"Highligh dates range with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"range\"), \" prop. Prop accepts an array with two dates, later date must always go last:\"), mdx(Demo, {\n    data: MonthDemos.range,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"min-and-max-dates\"\n  }, \"Min and max dates\"), mdx(\"p\", null, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minDate\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxDate\"), \" props to define minimum and maximum possible dates.\\nDates which are not included in available interval will be disabled:\"), mdx(Demo, {\n    data: MonthDemos.boundaries,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"exclude-dates\"\n  }, \"Exclude dates\"), mdx(\"p\", null, \"To exclude dates set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"excludeDates\"), \" prop with function that receives date as an argument and returns\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if date should be disabled. For example, to disable weekends check if date day is 0 or 6:\"), mdx(Demo, {\n    data: MonthDemos.exclude,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"hide-weekdays-names\"\n  }, \"Hide weekdays names\"), mdx(\"p\", null, \"To hide weekdays names row set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"hideWeekdays\"), \" prop:\"), mdx(Demo, {\n    data: MonthDemos.weekdays,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"add-styles-to-days\"\n  }, \"Add styles to days\"), mdx(\"p\", null, \"You can apply styles to any day with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dayStyle\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dayClassName\"), \" callbacks.\\nBoth functions receive two arguments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"date\"), \" \\u2013 date object which is used to render day\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"modifiers\"), \" \\u2013 modifiers that are applied to day\")), mdx(\"h3\", {\n    \"id\": \"modifiers\"\n  }, \"Modifiers\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"interface DayModifiers {\\n  /** Is date selected and is first or last in range? */\\n  selectedInRange: boolean;\\n\\n  /** Is date equal to value? */\\n  selected: boolean;\\n\\n  /** Based on minDate, maxDate, excludeDate and disableOutsideEvents props */\\n  disabled: boolean;\\n\\n  /** Is date is range? */\\n  inRange: boolean;\\n\\n  /** Is date first or last in given range? */\\n  firstInRange: boolean;\\n  lastInRange: boolean;\\n\\n  /** Is date Saturday or Sunday? */\\n  weekend: boolean;\\n\\n  /** Is date outside of given month? */\\n  outside: boolean;\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"styles-based-on-date\"\n  }, \"Styles based on date\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dayStyle\"), \" callback allows you to add inline styles to days.\\nFunction must return either styles object or null.\"), mdx(\"p\", null, \"In this example we will add red background to each Friday 13th based on date (first argument):\"), mdx(Demo, {\n    data: MonthDemos.styles,\n    mdxType: \"Demo\"\n  }), mdx(\"h3\", {\n    \"id\": \"styles-based-on-modifiers\"\n  }, \"Styles based on modifiers\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dayClassName\"), \" callback allows you to add className to days.\\nFunction must return either className string or null.\"), mdx(\"p\", null, \"In this example we will hide all outside dates and change color of weekends based on modifiers (second argument):\"), mdx(Demo, {\n    data: MonthDemos.modifiers,\n    mdxType: \"Demo\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"f0e110bb-2ca4-5d0d-b25f-90dcbb85e2c9","slug":"dates/month","__params":{"slug":"dates"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}