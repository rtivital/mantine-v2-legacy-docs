{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/dates/date-picker/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Controlled"},{"depth":2,"value":"Localization"},{"depth":2,"value":"Open calendal within modal"},{"depth":2,"value":"Year and month picker"},{"depth":2,"value":"Min and max dates"},{"depth":2,"value":"Exclude dates"},{"depth":2,"value":"Add styles to days"},{"depth":3,"value":"Modifiers"},{"depth":3,"value":"Styles based on date"},{"depth":3,"value":"Styles based on modifiers"},{"depth":2,"value":"Format labels"},{"depth":2,"value":"Disallow clear"},{"depth":2,"value":"Input props"},{"depth":2,"value":"Icon and right section"},{"depth":2,"value":"Invalid state and error"},{"depth":2,"value":"Disabled state"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"Server side rendering"},{"depth":2,"value":"Accessibility and usability"}],"frontmatter":{"title":"DatePicker","package":"@mantine/dates","slug":"/dates/date-picker/","props":["DatePicker"],"import":"import { DatePicker } from '@mantine/dates';","docs":"dates/DatePicker.mdx","source":"mantine-dates/src/components/DatePicker/DatePicker.tsx","description":"Capture date input from user","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["DatePicker"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-dates\",\n  \"package\": \"@mantine/dates\",\n  \"title\": \"DatePicker\",\n  \"order\": 1,\n  \"slug\": \"/dates/date-picker/\",\n  \"description\": \"Capture date input from user\",\n  \"props\": [\"DatePicker\"],\n  \"import\": \"import { DatePicker } from '@mantine/dates';\",\n  \"source\": \"mantine-dates/src/components/DatePicker/DatePicker.tsx\",\n  \"docs\": \"dates/DatePicker.mdx\",\n  \"styles\": [\"DatePicker\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(Demo, {\n    data: DatePickerDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { DatePicker } from '@mantine/dates';\\n\\nfunction Demo() {\\n  const [value, onChange] = useState(new Date());\\n  return <DatePicker value={value} onChange={onChange} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"localization\"\n  }, \"Localization\"), mdx(\"p\", null, \"All @mantine/dates components are built with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://day.js.org/\"\n  }, \"dayjs\"), \" library.\\nDefault locale is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"en\"), \", to change this follow \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://day.js.org/docs/en/i18n/loading-into-nodejs\"\n  }, \"dayjs localization guide\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// First import locale data\\nimport 'dayjs/locale/ru';\\n\")), mdx(\"p\", null, \"Then set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"locale\"), \" prop in component:\"), mdx(Demo, {\n    data: DatePickerDemos.localization,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"open-calendal-within-modal\"\n  }, \"Open calendal within modal\"), mdx(\"p\", null, \"You can change the way calendar pop up on the page.\\nDefault variant is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"popover\"), \", set it to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"modal\"), \" to display calendar in modal:\"), mdx(Demo, {\n    data: DatePickerDemos.modal,\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"In most cases you would want to switch to modal when certain breakpoint is reached.\\nTo implement this use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-media-query/\"\n  }, \"use-media-query\"), \" hook:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useMediaQuery } from '@mantine/hooks';\\nimport { DatePicker } from '@mantine/dates';\\n\\nfunction Demo() {\\n  const isMobile = useMediaQuery('(max-width: 755px)');\\n  return <DatePicker dropdownType={isMobile ? 'modal' : 'popover'} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"year-and-month-picker\"\n  }, \"Year and month picker\"), mdx(\"p\", null, \"You can replace calendar label with year and month selects.\\nTo use this option provide props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"withSelect\"), \" \\u2013 replace label with month and year select\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"yearsRange\"), \" \\u2013 years range that should be used to generate years select options\")), mdx(Demo, {\n    data: DatePickerDemos.withSelect,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"min-and-max-dates\"\n  }, \"Min and max dates\"), mdx(\"p\", null, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"minDate\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxDate\"), \" props to define minimum and maximum possible dates.\\nDates which are not included in available interval will be disabled:\"), mdx(Demo, {\n    data: DatePickerDemos.boundaries,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"exclude-dates\"\n  }, \"Exclude dates\"), mdx(\"p\", null, \"To exclude dates set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"excludeDates\"), \" prop with function that receives date as an argument and returns\\n\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"true\"), \" if date should be disabled. For example, to disable weekends check if date day is 0 or 6:\"), mdx(Demo, {\n    data: DatePickerDemos.exclude,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"add-styles-to-days\"\n  }, \"Add styles to days\"), mdx(\"p\", null, \"You can apply styles to any day with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dayStyle\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dayClassName\"), \" callbacks.\\nBoth functions receive two arguments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"date\"), \" \\u2013 date object which is used to render day\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"modifiers\"), \" \\u2013 modifiers that are applied to day\")), mdx(\"h3\", {\n    \"id\": \"modifiers\"\n  }, \"Modifiers\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"interface DayModifiers {\\n  /** Is date selected and is first or last in range? */\\n  selectedInRange: boolean;\\n\\n  /** Is date equal to value? */\\n  selected: boolean;\\n\\n  /** Based on minDate, maxDate, excludeDate and disableOutsideEvents props */\\n  disabled: boolean;\\n\\n  /** Is date is range? */\\n  inRange: boolean;\\n\\n  /** Is date first or last in given range? */\\n  firstInRange: boolean;\\n  lastInRange: boolean;\\n\\n  /** Is date Saturday or Sunday? */\\n  weekend: boolean;\\n\\n  /** Is date outside of given month? */\\n  outside: boolean;\\n}\\n\")), mdx(\"h3\", {\n    \"id\": \"styles-based-on-date\"\n  }, \"Styles based on date\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dayStyle\"), \" callback allows you to add inline styles to days.\\nFunction must return either styles object or null.\"), mdx(\"p\", null, \"In this example we will add red background to each Friday 13th based on date (first argument):\"), mdx(Demo, {\n    data: DatePickerDemos.styles,\n    mdxType: \"Demo\"\n  }), mdx(\"h3\", {\n    \"id\": \"styles-based-on-modifiers\"\n  }, \"Styles based on modifiers\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"dayClassName\"), \" callback allows you to add className to days.\\nFunction must return either className string or null.\"), mdx(\"p\", null, \"In this example we will hide all outside dates and change color of weekends based on modifiers (second argument):\"), mdx(Demo, {\n    data: DatePickerDemos.modifiers,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"format-labels\"\n  }, \"Format labels\"), mdx(\"p\", null, \"By default DatePicker will display dates in human readable format.\\nTo change that you can provide \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://day.js.org/docs/en/display/format\"\n  }, \"dayjs\"), \" format string to the following props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"inputFormat\"), \" \\u2013 set input value date format\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"labelFormat\"), \" \\u2013 set calendar month label format\")), mdx(Demo, {\n    data: DatePickerDemos.format,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"disallow-clear\"\n  }, \"Disallow clear\"), mdx(\"p\", null, \"By default date picker can be cleared, to disable this, set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearable\"), \" prop to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"false\"), \":\"), mdx(Demo, {\n    data: DatePickerDemos.notClearable,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"input-props\"\n  }, \"Input props\"), mdx(\"p\", null, \"Component supports all props from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/input/\"\n  }, \"Input\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/input-wrapper/\"\n  }, \"InputWrapper\"), \" components:\"), mdx(Demo, {\n    data: DatePickerDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"icon-and-right-section\"\n  }, \"Icon and right section\"), mdx(\"p\", null, \"You can use any React node as icon:\"), mdx(Demo, {\n    data: DatePickerDemos.icon,\n    demoProps: {\n      zIndex: 4\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"invalid-state-and-error\"\n  }, \"Invalid state and error\"), mdx(Demo, {\n    data: DatePickerDemos.validation,\n    demoProps: {\n      zIndex: 4\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"disabled-state\"\n  }, \"Disabled state\"), mdx(Demo, {\n    data: DatePickerDemos.disabled,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get input ref with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useRef } from 'react';\\nimport { DatePicker } from '@mantine/dates';\\n\\nfunction Demo() {\\n  const ref = useRef(null);\\n  return <DatePicker elementRef={ref} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"server-side-rendering\"\n  }, \"Server side rendering\"), mdx(\"p\", null, \"Component uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-id/\"\n  }, \"use-id\"), \" hook to generate unique ids and aria- attributes,\\nprovide static \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" prop to prevent props mismatch:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<DatePicker /> // -> random id generated both on client and server, props mismatch warning\\n<DatePicker id=\\\"my-date-picker\\\" /> // -> id is static, no mismatches\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility-and-usability\"\n  }, \"Accessibility and usability\"), mdx(\"p\", null, \"To make all component controls visible to screen reader set following props:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// When withSelect prop set to false\\n<DatePicker\\n  withSelect={false}\\n  nextMonthLabel=\\\"Next month\\\" // -> aria-label for button that switches to next month\\n  previousMonthLabel=\\\"Previous month\\\" // -> aria-label for button that switches to previous month\\n  clearButtonLabel=\\\"Clear field\\\" // -> aria-label for clear button, use when clearable prop is true\\n/>\\n\\n// When withSelect prop set to true\\n<DatePicker\\n  withSelect\\n  nextMonthLabel=\\\"Next month\\\" // -> aria-label for button that switches to next month\\n  previousMonthLabel=\\\"Previous month\\\" // -> aria-label for button that switches to previous month\\n  yearLabel=\\\"Select year\\\" // -> year select aria-label\\n  monthLabel=\\\"Select month\\\" // -> month select aria-label\\n/>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"2f3f162d-671a-5402-9971-45d202ec3d51","slug":"dates/date-picker","__params":{"slug":"dates"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}