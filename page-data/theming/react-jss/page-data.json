{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/theming/react-jss/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"Styling with react-jss"},{"depth":2,"value":"Theming context"},{"depth":2,"value":"Theme as function value"},{"depth":2,"value":"getFocusStyles util"},{"depth":2,"value":"getFontStyles util"}],"frontmatter":{"title":"Styling with react-jss","package":null,"slug":"/theming/react-jss/","props":null,"import":null,"docs":null,"source":null,"description":null,"bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"theming\",\n  \"title\": \"Styling with react-jss\",\n  \"slug\": \"/theming/react-jss/\",\n  \"order\": 3\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"styling-with-react-jss\"\n  }, \"Styling with react-jss\"), mdx(\"p\", null, \"All Mantine components are built with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://cssinjs.org/react-jss/\"\n  }, \"react-jss\"), \".\\nWe recommend to use react-jss to style the rest of your application\\nas it provides you with the most convenient way to utilize Mantine theme, but it is not required\\n\\u2013 you can use any other styling tools and languages.\"), mdx(\"h2\", {\n    \"id\": \"theming-context\"\n  }, \"Theming context\"), mdx(\"p\", null, \"If your application is \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"wrapped with MantineProvider\"), \" you can utilize theming context with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createStyles\"), \" function:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { createStyles } from '@mantine/core';\\n\\nconst useStyles = createStyles((theme) => ({\\n  wrapper: {\\n    background: theme.colors.gray[5],\\n  },\\n}));\\n\\nfunction YourComponent() {\\n  const classes = useStyles();\\n  return <div className={classes.wrapper} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"theme-as-function-value\"\n  }, \"Theme as function value\"), mdx(\"p\", null, \"This way will work in all cases no matter if you use MantineProvider or not:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { createUseStyles } from 'react-jss';\\nimport { useMantineTheme } from '@mantine/core';\\n\\nconst useStyles = createUseStyles({\\n  wrapper: ({ theme }) => ({\\n    background: theme.colors.gray[5],\\n  }),\\n});\\n\\nfunction YourComponent() {\\n  const classes = useStyles({ theme: useMantineTheme() });\\n  return <div className={classes.wrapper} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"getfocusstyles-util\"\n  }, \"getFocusStyles util\"), mdx(\"p\", null, \"getFocusStyles function returns mantine focus styles in jss format for interactive elements.\\nFocus styles are visible only when user navigates with keyboard.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { getFocusStyles, createStyles } from '@mantine/core';\\n\\ncreateStyles((theme) => ({\\n  button: {\\n    ...getFocusStyles(theme),\\n    color: 'red',\\n  },\\n}));\\n\")), mdx(\"h2\", {\n    \"id\": \"getfontstyles-util\"\n  }, \"getFontStyles util\"), mdx(\"p\", null, \"getFontStyles function returns font styles from theme with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/CSS/font-smooth\"\n  }, \"font smoothing\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { getFontStyles, createStyles } from '@mantine/core';\\n\\ncreateUseStyles((theme) => ({\\n  wrapper: {\\n    ...getFontStyles(theme),\\n    color: 'red',\\n  },\\n}));\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"528f8f5a-8501-5f35-a785-2981ff7b2c4b","slug":"theming/react-jss","__params":{"slug":"theming"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}