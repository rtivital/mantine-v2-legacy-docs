{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/theming/theming-context/","result":{"data":{"mdx":{"headings":[{"depth":1,"value":"Theming context"},{"depth":2,"value":"MantineProvider"},{"depth":2,"value":"use-mantine-theme hook"},{"depth":2,"value":"Theme object"},{"depth":2,"value":"Nested MantineProviders"},{"depth":2,"value":"Overriding theme on component level"}],"frontmatter":{"title":"Theming context","package":null,"slug":"/theming/theming-context/","props":null,"import":null,"docs":null,"source":null,"description":null,"bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"theming\",\n  \"title\": \"Theming context\",\n  \"slug\": \"/theming/theming-context/\",\n  \"order\": 0\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h1\", {\n    \"id\": \"theming-context\"\n  }, \"Theming context\"), mdx(\"h2\", {\n    \"id\": \"mantineprovider\"\n  }, \"MantineProvider\"), mdx(\"p\", null, \"MantineProvider component allows you to change theme globally.\\nIt is not required if you decide to stick with default theme:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { MantineProvider, Button } from '@mantine/core';\\n\\nfunction App() {\\n  return <Button>My app button</Button>;\\n}\\n\\n// Custom theme is applied to all components in App\\nfunction WithProvider() {\\n  return (\\n    <MantineProvider theme={{ fontFamily: 'Open Sans' }}>\\n      <App />\\n    </MantineProvider>\\n  );\\n}\\n\\n// Default theme is used in all components in App\\nfunction NoProvider() {\\n  return <App />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"use-mantine-theme-hook\"\n  }, \"use-mantine-theme hook\"), mdx(\"p\", null, \"Hook returns theme from MantineProvider context or default theme\\nif you did not wrap application with MantineProvider.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useMantineTheme } from '@mantine/core';\\n\\nfunction Component() {\\n  const theme = useMantineTheme();\\n  return <div style={{ background: theme.colors.blue[5] }} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"theme-object\"\n  }, \"Theme object\"), mdx(\"p\", null, \"Mantine theme is an object where your application's colors, fonts, spacing, border-radius and other design elements are defined.\"), mdx(\"p\", null, \"Theme shape:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"interface MantineTheme {\\n  loader: 'oval' | 'bars' | 'dots';\\n  colorScheme: 'light' | 'dark';\\n  white: string;\\n  black: string;\\n  colors: Record<string, Tuple<string, 10>>;\\n  fontFamily: CSSProperties['fontFamily'];\\n  lineHeight: CSSProperties['lineHeight'];\\n  transitionTimingFunction: CSSProperties['transitionTimingFunction'];\\n  fontFamilyMonospace: CSSProperties['fontFamily'];\\n  primaryColor: string;\\n\\n  fontSizes: Record<'xs' | 'sm' | 'md' | 'lg' | 'xl', number>;\\n  radius: Record<'xs' | 'sm' | 'md' | 'lg' | 'xl', number>;\\n  spacing: Record<'xs' | 'sm' | 'md' | 'lg' | 'xl', number>;\\n  breakpoints: Record<'xs' | 'sm' | 'md' | 'lg' | 'xl', number>;\\n  shadows: Record<'xs' | 'sm' | 'md' | 'lg' | 'xl', string>;\\n\\n  headings: {\\n    fontFamily: CSSProperties['fontFamily'];\\n    fontWeight: CSSProperties['fontWeight'];\\n    sizes: {\\n      h1: { fontSize: CSSProperties['fontSize']; lineHeight: CSSProperties['lineHeight'] };\\n      h2: { fontSize: CSSProperties['fontSize']; lineHeight: CSSProperties['lineHeight'] };\\n      h3: { fontSize: CSSProperties['fontSize']; lineHeight: CSSProperties['lineHeight'] };\\n      h4: { fontSize: CSSProperties['fontSize']; lineHeight: CSSProperties['lineHeight'] };\\n      h5: { fontSize: CSSProperties['fontSize']; lineHeight: CSSProperties['lineHeight'] };\\n      h6: { fontSize: CSSProperties['fontSize']; lineHeight: CSSProperties['lineHeight'] };\\n    };\\n  };\\n}\\n\")), mdx(\"p\", null, \"Pass theme object to MantineProvider to change global styles:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Theme is deeply merged with default theme\\n<MantineProvider\\n  theme={{\\n    colorScheme: 'light',\\n    colors: {\\n      // Add your color\\n      'deep-blue': ['#E9EDFC', '#C1CCF6', '#99ABF0' /* ... */],\\n      // or replace default theme color\\n      blue: ['#E9EDFC', '#C1CCF6', '#99ABF0' /* ... */],\\n    },\\n\\n    shadows: {\\n      // other shadows (xs, sm, lg) will be merged from default theme\\n      md: '1px 1px 3px rgba(0,0,0,.25)',\\n      xl: '5px 5px 3px rgba(0,0,0,.25)',\\n    },\\n\\n    headings: {\\n      fontFamily: 'Roboto, sans-serif',\\n      sizes: {\\n        h1: { fontSize: 30 },\\n      },\\n    },\\n  }}\\n>\\n  <YourApp />\\n</MantineProvider>\\n\")), mdx(\"h2\", {\n    \"id\": \"nested-mantineproviders\"\n  }, \"Nested MantineProviders\"), mdx(\"p\", null, \"If some parts of your application require different theme styles\\nyou can wrap them in another MantineProvider.\\nNested MantineProvider components do not inherit theme properties from parents\\nand merge theme prop with default theme.\"), mdx(NestedProvidersDemo, {\n    mdxType: \"NestedProvidersDemo\"\n  }), mdx(\"h2\", {\n    \"id\": \"overriding-theme-on-component-level\"\n  }, \"Overriding theme on component level\"), mdx(\"p\", null, \"Each Mantine component that uses theme supports theme override with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"themeOverride\"), \" prop:\"), mdx(ThemeOverrideDemo, {\n    mdxType: \"ThemeOverrideDemo\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"6cb13895-bbfd-5e0f-9df2-1af95bb7fd1d","slug":"theming/theming-context","__params":{"slug":"theming"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}