{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-id/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"API"},{"depth":2,"value":"Definition"}],"frontmatter":{"title":"use-id","package":"@mantine/hooks","slug":"/hooks/use-id/","props":null,"import":"import { useId } from '@mantine/hooks';","docs":"hooks/use-id.mdx","source":"mantine-hooks/src/use-id/use-id.ts","description":"Generate memoized random id","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-hooks\",\n  \"package\": \"@mantine/hooks\",\n  \"category\": \"state\",\n  \"title\": \"use-id\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-id/\",\n  \"description\": \"Generate memoized random id\",\n  \"import\": \"import { useId } from '@mantine/hooks';\",\n  \"docs\": \"hooks/use-id.mdx\",\n  \"source\": \"mantine-hooks/src/use-id/use-id.ts\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"use-id generates random id that persists across renders.\\nHook is usually used to bind input elements to labels.\\nGenerated random id is saved to ref and will not change unless component is unmounted.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useId } from '@mantine/hooks';\\n\\nfunction Input({ id }) {\\n  const uuid = useId(id);\\n\\n  return (\\n    <>\\n      <label htmlFor={uuid}>Input label</label>\\n      <input type=\\\"text\\\" id={uuid} />\\n    </>\\n  );\\n}\\n\\n// input and label will have id 'my-id'\\nconst withId = <Input id=\\\"my-id\\\" />;\\n\\n// input and label will have random id 'mantine-fZMoF'\\nconst withoutId = <Input />;\\n\")), mdx(\"h2\", {\n    \"id\": \"api\"\n  }, \"API\"), mdx(\"p\", null, \"use-id hook accepts two arguments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"id\"), \" \\u2013 string value that is returned by default\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"generateId\"), \" \\u2013 function that is used to generate random id\")), mdx(\"p\", null, \"Hook returns string value that is either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" (if first argument is passed) or random id generated with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"generateId\"), \" function.\"), mdx(\"h2\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function useId(id: string, generateId?: () => string): string;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"4584dc94-2ca1-53ae-853a-205d86f0bd48","slug":"hooks/use-id","__params":{"slug":"hooks"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}