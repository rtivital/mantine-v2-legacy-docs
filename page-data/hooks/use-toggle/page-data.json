{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-toggle/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"API"},{"depth":2,"value":"use-boolean-toggle"},{"depth":2,"value":"TypeScript"},{"depth":3,"value":"Set type"},{"depth":3,"value":"Definition"}],"frontmatter":{"title":"use-toggle","package":"@mantine/hooks","slug":"/hooks/use-toggle/","props":null,"import":"import { useToggle } from '@mantine/hooks';","docs":"hooks/use-toggle.mdx","source":"mantine-hooks/src/use-toggle/use-toggle.ts","description":"Switch between two states","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-hooks\",\n  \"package\": \"@mantine/hooks\",\n  \"title\": \"use-toggle\",\n  \"category\": \"state\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-toggle/\",\n  \"description\": \"Switch between two states\",\n  \"import\": \"import { useToggle } from '@mantine/hooks';\",\n  \"docs\": \"hooks/use-toggle.mdx\",\n  \"source\": \"mantine-hooks/src/use-toggle/use-toggle.ts\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Hook implements common state pattern \\u2013 it switches state between two given values:\"), mdx(Demo, {\n    data: useToggleHook,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"api\"\n  }, \"API\"), mdx(\"p\", null, \"Hook accepts two arguments:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"initialValue\"), \" \\u2013 initial state\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"options\"), \" \\u2013 an array with 2 elements, must include initial value\")), mdx(\"p\", null, \"Hook returns an array with state value and toggle function:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const [value, toggle] = useToggle('dark', ['light', 'dark']);\\n\\ntoggle(); // -> value == 'light'\\ntoggle(); // -> value == 'dark'\\n\\n// You can force specific value, in this case state will be set to given value\\ntoggle('dark'); // -> value == 'dark'\\n\")), mdx(\"h2\", {\n    \"id\": \"use-boolean-toggle\"\n  }, \"use-boolean-toggle\"), mdx(\"p\", null, \"use-boolean-toggle is a wrapper around use-toggle that works with boolean values:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useBooleanToggle, useToggle } from '@mantine/hooks';\\n\\nconst [value, toggle] = useBooleanToggle(false);\\n// same as\\nconst [value, toggle] = useToggle(false, [true, false]);\\n\")), mdx(\"h2\", {\n    \"id\": \"typescript\"\n  }, \"TypeScript\"), mdx(\"h3\", {\n    \"id\": \"set-type\"\n  }, \"Set type\"), mdx(\"p\", null, \"By default TypeScript will guess your type, but in most cases it's better to set type manually:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const [value, toggle] = useToggle('dark', ['light', 'dark']); // value is string\\nconst [value, toggle] = useToggle<'dark' | 'light'>('dark', ['light', 'dark']); // value is 'dark' | 'light'\\n\")), mdx(\"h3\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function useToggle<T>(\\n  initialValue: T,\\n  options: [T, T]\\n): readonly [T, (value?: React.SetStateAction<T>) => void];\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"fc9c8ff9-a573-5ed8-b512-a7150a7eb314","slug":"hooks/use-toggle","__params":{"slug":"hooks"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}