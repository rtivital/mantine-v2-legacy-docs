{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-queue/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"API"},{"depth":2,"value":"Example"},{"depth":2,"value":"TypeScript"},{"depth":2,"value":"TypeScript"},{"depth":3,"value":"Definition"},{"depth":3,"value":"Item type"}],"frontmatter":{"title":"use-queue","package":"@mantine/hooks","slug":"/hooks/use-queue/","props":null,"import":"import { useQueue } from '@mantine/hooks';","docs":"hooks/use-queue.mdx","source":"mantine-hooks/src/use-queue/use-queue.ts","description":"Add data to queue if current limit is exceeded","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-hooks\",\n  \"package\": \"@mantine/hooks\",\n  \"title\": \"use-queue\",\n  \"category\": \"state\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-queue/\",\n  \"description\": \"Add data to queue if current limit is exceeded\",\n  \"import\": \"import { useQueue } from '@mantine/hooks';\",\n  \"docs\": \"hooks/use-queue.mdx\",\n  \"source\": \"mantine-hooks/src/use-queue/use-queue.ts\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Use this hook when you need to limit amount of data in current state and place the rest of it in queue.\\nFor example, in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/others/notifications/\"\n  }, \"@mantine/notifications\"), \" package amount of\\nnotifications that is currently displayed is limited and other new notifications are added to queue and displayed once\\navailable space appears.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useQueue } from '@mantine/hooks';\\n\\nconst { state, queue, add, update, cleanQueue } = useQueue({\\n  initialValues: [1],\\n  limit: 3,\\n});\\n\\n// state -> [1], queue -> []\\n\\n// When state.length is less that limit, new items are added to state\\nadd(2);\\n// state -> [1,2], queue -> []\\n\\n// When state.length is equal to limit, new items are added to queue\\nadd(3, 4, 5, 6);\\n// state -> [1,2], queue -> [3,4,5,6]\\n\\n// Use update function to modify items\\nupdate((values) => values.map((item) => item * 3));\\n// state -> [3,6], queue -> [9,12,15,18]\\n\\n// If you add or remove items in update function,\\n// they will be divided between queue and state according to limit\\n// order is always preserved\\nupdate((values) => values.filter((item) => item % 2));\\n// state -> [3,9], queue -> [15]\\n\\n// Remove all items from queue\\ncleanQueue();\\n// state -> [3,9], queue -> []\\n\\n// Remove all items from queue and state\\nupdate(() => []);\\n// state -> [], queue -> []\\n\")), mdx(\"h2\", {\n    \"id\": \"api\"\n  }, \"API\"), mdx(\"p\", null, \"Hook accepts single argument \\u2013 configuration object with keys:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"initialValues\"), \" \\u2013 optional initial values (divided between state and queue according to limit), defaults to empty array\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"limit\"), \" \\u2013 maximum amount of items that state can include, every next item after limit is exceeded is put in queue\")), mdx(\"p\", null, \"Return value:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"state\"), \" \\u2013 current state\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"queue\"), \" \\u2013 current queue\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"add\"), \" \\u2013 add any amount of items to state or queue\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"update\"), \" \\u2013 apply given function to all items in state and queue, use it to filter, modify or add items\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cleanQueue\"), \" \\u2013 remove all items from queue\")), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"p\", null, \"Example of use-queue hook usage in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/others/notifications/\"\n  }, \"Mantine notifications system\"), \". By default\\nonly 5 notifications can be displayed at a time, rest are added to queue.\"), mdx(Demo, {\n    data: NotificationsDemos.clean,\n    demoProps: {\n      toggle: true\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"typescript\"\n  }, \"TypeScript\"), mdx(\"p\", null, \"By default hook will get types information from initialValues automatically:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const q = useQueue({\\n  limit: 2,\\n  initialValues: [\\n    { name: 'Bob', id: 1 },\\n    { name: 'Alice', id: 2 },\\n  ],\\n});\\n\\ntypeof q.state[number]; // -> { name: string; id: number; }\\n\")), mdx(\"p\", null, \"If you do not provide initialValues, pass in type for state item:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const q = useQueue<{ name: string; id: number }>({\\n  limit: 2,\\n  initialValues: [],\\n});\\n\\nq.add({ name: 'Bob', id: 1 });\\n\")), mdx(\"h2\", {\n    \"id\": \"typescript-1\"\n  }, \"TypeScript\"), mdx(\"h3\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function useQueue<T>(configuration: { initialValues?: T[]; limit: number }): {\\n  state: T[];\\n  queue: T[];\\n  add: (...items: T[]) => void;\\n  update: (fn: (state: T[]) => T[]) => void;\\n  cleanQueue: () => void;\\n};\\n\")), mdx(\"h3\", {\n    \"id\": \"item-type\"\n  }, \"Item type\"), mdx(\"p\", null, \"Item type is set automatically based on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialValues\"), \",\\nif you do not have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialValue\"), \" it is required to pass in item type:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// ok -> typeof state[number] -> string\\nconst { state } = useQueue({ initialValues: ['1', '2', '3'], limit: 3 });\\n\\n// type cannot be assigned automatically, specify it\\nconst { state } = useQueue<string>({ limit: 3 });\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"b1a26efe-203d-583e-b44d-061dce119dbc","slug":"hooks/use-queue","__params":{"slug":"hooks"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}