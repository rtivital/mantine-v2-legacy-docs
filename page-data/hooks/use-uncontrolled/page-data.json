{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-uncontrolled/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"TypeScript"},{"depth":3,"value":"Set value type"},{"depth":3,"value":"Definition"}],"frontmatter":{"title":"use-uncontrolled","package":"@mantine/hooks","slug":"/hooks/use-uncontrolled/","props":null,"import":"import { useUncontrolled } from '@mantine/hooks';","docs":"hooks/use-uncontrolled.mdx","source":"mantine-hooks/src/use-uncontrolled/use-uncontrolled.ts","description":"Manage state of both controlled and uncontrolled components","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-hooks\",\n  \"package\": \"@mantine/hooks\",\n  \"title\": \"use-uncontrolled\",\n  \"category\": \"state\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-uncontrolled/\",\n  \"description\": \"Manage state of both controlled and uncontrolled components\",\n  \"import\": \"import { useUncontrolled } from '@mantine/hooks';\",\n  \"docs\": \"hooks/use-uncontrolled.mdx\",\n  \"source\": \"mantine-hooks/src/use-uncontrolled/use-uncontrolled.ts\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Hook allows you to manage state for both controlled and uncontrolled components:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useUncontrolled } from '@mantine/hooks';\\n\\nfunction YourInput({ value, defaultValue, onChange }) {\\n  const [_value, handleChange] = useUncontrolled({\\n    value,\\n    defaultValue,\\n    finalValue: 'Final',\\n    rule: (val) => typeof val === 'string',\\n    onChange,\\n  });\\n\\n  return (\\n    <input\\n      type=\\\"text\\\"\\n      value={_value}\\n      onChange={(event) => handleChange(event.currentTarget.value)}\\n    />\\n  );\\n}\\n\")), mdx(\"p\", null, \"In the example above \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rule\"), \" function is used to determine with value should be used initially:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// defaultValue and finalValue are ignored for controlled components\\n// _value === 'Hello'\\n<YourInput value=\\\"Hello\\\" defaultValue=\\\"There\\\" onChange={() => {}} />\\n\\n// Since value prop does not meet requirements default value will be used instead\\n// _value === 'There'\\n<YourInput value={null} defaultValue=\\\"There\\\" />\\n\\n// When both value and defaultValue fail to meet requirements, finalValue will be used\\n// _value === 'Final'\\n<YourInput value={null} defaultValue={null} />\\n\")), mdx(\"p\", null, \"Now you can use your component as controlled and uncontrolled input:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Uncontrolled\\n<YourInput />\\n<YourInput defaultValue=\\\"hello\\\" />\\n<YourInput onChange={() => {}} /> // still possible since value is stored in internal state\\n\\n// Controlled\\n<YourInput value=\\\"Hello\\\" onChange={() => {}} />\\n\")), mdx(\"h2\", {\n    \"id\": \"typescript\"\n  }, \"TypeScript\"), mdx(\"h3\", {\n    \"id\": \"set-value-type\"\n  }, \"Set value type\"), mdx(\"p\", null, \"By default hook will set type automatically, but you can provide your own type:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"useUncontrolled<number>({\\n  value: 10,\\n  defaultValue: 5,\\n  finalValue: 20,\\n  rule: (val) => val >= 10,\\n  onChange: (val) => console.log(val > 10),\\n});\\n\")), mdx(\"h3\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function useUncontrolled<T>(configuration: {\\n  value: T;\\n  defaultValue: T;\\n  finalValue: T;\\n  onChange(value: T): void;\\n  onValueUpdate?(value: T): void;\\n  rule: (value: T) => boolean;\\n}): readonly [T, (val: T) => void, 'controlled' | 'uncontrolled'];\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"803d577a-9e10-5b5d-a904-7db25df83114","slug":"hooks/use-uncontrolled","__params":{"slug":"hooks"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}