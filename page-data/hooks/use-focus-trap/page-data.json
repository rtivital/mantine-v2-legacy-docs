{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-focus-trap/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"API"},{"depth":2,"value":"Combine with other ref based hooks"},{"depth":2,"value":"Initial focus"},{"depth":2,"value":"Examples"},{"depth":2,"value":"Definition"}],"frontmatter":{"title":"use-focus-trap","package":"@mantine/hooks","slug":"/hooks/use-focus-trap/","props":null,"import":"import { useFocusTrap } from '@mantine/hooks';","docs":"hooks/use-focus-trap.mdx","source":"mantine-hooks/src/use-focus-trap/use-focus-trap.ts","description":"Trap focus inside given node","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-hooks\",\n  \"package\": \"@mantine/hooks\",\n  \"category\": \"dom\",\n  \"title\": \"use-focus-trap\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-focus-trap/\",\n  \"description\": \"Trap focus inside given node\",\n  \"import\": \"import { useFocusTrap } from '@mantine/hooks';\",\n  \"docs\": \"hooks/use-focus-trap.mdx\",\n  \"source\": \"mantine-hooks/src/use-focus-trap/use-focus-trap.ts\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Use use-focus-trap hook to trap focus at given node, for example in modal, drawer or menu.\\nNode must include at least one focusable element. When node unmounts, focus trap automatically disabled.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useFocusTrap } from '@mantine/hooks';\\n\\nfunction YourModal() {\\n  const focusTrapRef = useFocusTrap();\\n\\n  return (\\n    <div ref={focusTrapRef}>\\n      <input />\\n    </div>\\n  );\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"api\"\n  }, \"API\"), mdx(\"p\", null, \"Hook accepts focus trap active state as single argument:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"useFocusTrap(); // -> focus trap inactive\\nuseFocusTrap(true); // -> focus trap active\\n\\nuseFocusTrap(false); // -> focus trap disabled\\n\")), mdx(\"p\", null, \"Hook returns ref that should be passed to dom node:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const focusTrapRef = useFocusTrap();\\n\\n// With regular element:\\n<div ref={focusTrapRef} />\\n\\n// With Mantine component:\\n<Paper elementRef={focusTrapRef} />\\n\")), mdx(\"h2\", {\n    \"id\": \"combine-with-other-ref-based-hooks\"\n  }, \"Combine with other ref based hooks\"), mdx(\"p\", null, \"Usually focus trap is not used alone. To combine use-focus-trap hook with other ref based hooks use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-merged-ref/\"\n  }, \"use-merged-ref\"), \" hook:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useRef } from 'react';\\nimport { useClickOutside, useFocusTrap, useMergedRef } from '@mantine/hooks';\\n\\nfunction Demo() {\\n  const myRef = useRef();\\n  const useClickOutsideRef = useClickOutside(() => {});\\n  const focusTrapRef = useFocusTrap();\\n  const mergedRef = useMergedRef(myRef, useClickOutsideRef, focusTrapRef);\\n\\n  return <div ref={mergedRef} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"initial-focus\"\n  }, \"Initial focus\"), mdx(\"p\", null, \"By default focus trap will move focus to first interactive element.\\nTo specify element that should receive initial focus add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data-autofocus\"), \" attribute,\\nnote that focus trap works with dom and this attribute should be added to element:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useFocusTrap } from '@mantine/hooks';\\n\\nfunction YourModal() {\\n  const focusTrapRef = useFocusTrap();\\n\\n  return (\\n    <div ref={focusTrapRef}>\\n      <input />\\n      {/* Second input in modal will have initial focus */}\\n      <input data-autofocus />\\n      <input />\\n    </div>\\n  );\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"p\", null, \"use-focus-trap is used in some Mantine components: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/modal/\"\n  }, \"Modal\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/drawer/\"\n  }, \"Drawer\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/menu/\"\n  }, \"Menu\"), \" and others.\"), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/modal/\"\n  }, \"Modal\"), \" example \\u2013 when modal is opened focus is trapped inside:\"), mdx(Demo, {\n    data: ModalDemos.usage,\n    demoProps: {\n      toggle: true\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/menu/\"\n  }, \"Menu\"), \" example \\u2013 when menu is opened focus is trapped inside\\nand Tab key is disabled:\"), mdx(Demo, {\n    data: MenuDemos.usage,\n    demoProps: {\n      toggle: true\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function useFocusTrap(active?: boolean): (instance: HTMLElement) => void;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"05897700-d714-5b4a-b0f1-1d963089994b","slug":"hooks/use-focus-trap","__params":{"slug":"hooks"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}