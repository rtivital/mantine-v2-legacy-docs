{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-focus-return/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Definition"}],"frontmatter":{"title":"use-focus-return","package":"@mantine/hooks","slug":"/hooks/use-focus-return/","props":null,"import":"import { useFocusReturn } from '@mantine/hooks';","docs":"hooks/use-focus-return.mdx","source":"mantine-hooks/src/use-focus-return/use-focus-return.ts","description":"Capture last focused element on the page and return focus to it once condition is met","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-hooks\",\n  \"package\": \"@mantine/hooks\",\n  \"category\": \"dom\",\n  \"title\": \"use-focus-return\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-focus-return/\",\n  \"description\": \"Capture last focused element on the page and return focus to it once condition is met\",\n  \"import\": \"import { useFocusReturn } from '@mantine/hooks';\",\n  \"docs\": \"hooks/use-focus-return.mdx\",\n  \"source\": \"mantine-hooks/src/use-focus-return/use-focus-return.ts\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"use-focus-return automatically manages focus returning to last focused element when given condition is met.\\nFor example it is used in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/modal/\"\n  }, \"Modal\"), \" component to restore focus after modal was closed.\"), mdx(\"p\", null, \"Try closing modal with escape key and see how focus returns to button after modal transition finishes:\"), mdx(Demo, {\n    data: ModalDemos.usage,\n    demoProps: {\n      toggle: true\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"In most cases you would want to use this hook with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-focus-trap/\"\n  }, \"use-focus-trap\"), \".\\nTo use hook provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opened\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transitionDuration\"), \" settings:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"useFocusReturn({\\n  // Is region with focus trap active?\\n  // When it activates hook saves document.activeElement to internal state\\n  // and focuses this element once focus trap is deactivated\\n  opened: false,\\n\\n  // Transition duration in ms, used to set timeout as element cannot be focused when focus trap is active\\n  transitionDuration: 200,\\n});\\n\")), mdx(\"h2\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function useFocusReturn(settings: { opened: boolean; transitionDuration: number }): void;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"ffd1d644-3298-5b1a-8375-c1ff1a19069b","slug":"hooks/use-focus-return","__params":{"slug":"hooks"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}