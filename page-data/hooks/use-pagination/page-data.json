{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-pagination/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Controlled"},{"depth":2,"value":"Siblings"},{"depth":2,"value":"Boundaries"},{"depth":2,"value":"Definition"}],"frontmatter":{"title":"use-pagination","package":"@mantine/hooks","slug":"/hooks/use-pagination/","props":null,"import":"import { usePagination } from '@mantine/hooks';","docs":"hooks/use-pagination.mdx","source":"mantine-hooks/src/use-pagination/use-pagination.ts","description":"Manage pagination state","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-hooks\",\n  \"package\": \"@mantine/hooks\",\n  \"category\": \"state\",\n  \"title\": \"use-pagination\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-pagination/\",\n  \"description\": \"Manage pagination state\",\n  \"import\": \"import { usePagination } from '@mantine/hooks';\",\n  \"docs\": \"hooks/use-pagination.mdx\",\n  \"source\": \"mantine-hooks/src/use-pagination/use-pagination.ts\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"use-pagination hook is a state management hook for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/pagination/\"\n  }, \"Pagination\"), \" component,\\nit lets you manage pagination with controlled and uncontrolled state:\"), mdx(Demo, {\n    data: PaginationDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const pagination = usePagination({ total: 10, initialPage: 1 });\\n\\npagination.range; // -> [1, 2, 3, 4, 5, 'dots', 10];\\n\\npagination.setPage(5);\\npagination.range; // -> [1, 'dots', 4, 5, 6, 'dots', 10];\\n\\npagination.next();\\npagination.range; // -> [1, 'dots', 5, 6, 7, 'dots', 10];\\n\\npagination.previous();\\npagination.range; // -> [1, 'dots', 4, 5, 6, 'dots', 10];\\n\\npagination.last();\\npagination.range; // -> [1, 'dots', 6, 7, 8, 9, 10];\\n\\npagination.first();\\npagination.range; // -> [1, 2, 3, 4, 5, 'dots', 10];\\n\")), mdx(\"h2\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"p\", null, \"Hook supports controlled mode, provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"page\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" props to manage state from outside:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const [page, onChange] = useState(1);\\nconst pagination = usePagination({ total: 10, page, onChange });\\n\\n// Will call onChange with 5\\npagination.setPage(5);\\npagination.range; // -> [1, 'dots', 4, 5, 6, 'dots', 10];\\n\\n// ... All other examples work the same\\n\")), mdx(\"h2\", {\n    \"id\": \"siblings\"\n  }, \"Siblings\"), mdx(\"p\", null, \"Control amount of active item siblings with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"siblings\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const pagination = usePagination({ total: 20, siblings: 3 });\\n\")), mdx(Demo, {\n    data: PaginationDemos.siblings,\n    demoProps: {\n      toggle: true\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"boundaries\"\n  }, \"Boundaries\"), mdx(\"p\", null, \"Control amount of items on each boundary with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"boundaries\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const pagination = usePagination({ total: 20, boundaries: 3 });\\n\")), mdx(Demo, {\n    data: PaginationDemos.boundaries,\n    demoProps: {\n      toggle: true\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function usePagination(settings: {\\n  /** Page selected on initial render, defaults to 1 */\\n  initialPage?: number;\\n\\n  /** Controlled active page number */\\n  page?: number;\\n\\n  /** Total amount of pages */\\n  total: number;\\n\\n  /** Siblings amount on left/right side of selected page, defaults to 1 */\\n  siblings?: number;\\n\\n  /** Amount of elements visible on left/right edges, defaults to 1  */\\n  boundaries?: number;\\n\\n  /** Callback fired after change of each page */\\n  onChange?: (page: number) => void;\\n}): {\\n  range: (number | 'dots')[];\\n  active: number;\\n  setPage: (page: number) => void;\\n  next: () => void;\\n  previous: () => void;\\n  first: () => void;\\n  last: () => void;\\n};\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"da1bf14b-7aa2-5361-8642-c32b4a61d565","slug":"hooks/use-pagination","__params":{"slug":"hooks"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}