{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-window-event/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Example"},{"depth":2,"value":"Definition"}],"frontmatter":{"title":"use-window-event","package":"@mantine/hooks","slug":"/hooks/use-window-event/","props":null,"import":"import { useWindowEvent } from '@mantine/hooks';","docs":"hooks/use-window-event.mdx","source":"mantine-hooks/src/use-window-event/use-window-event.ts","description":"Adds event listener to window on component mount and removes it on unmount","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-hooks\",\n  \"package\": \"@mantine/hooks\",\n  \"title\": \"use-window-event\",\n  \"category\": \"utils\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-window-event/\",\n  \"description\": \"Adds event listener to window on component mount and removes it on unmount\",\n  \"import\": \"import { useWindowEvent } from '@mantine/hooks';\",\n  \"docs\": \"hooks/use-window-event.mdx\",\n  \"source\": \"mantine-hooks/src/use-window-event/use-window-event.ts\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"use-window-event adds event listener to window object on component mount and removes it on unmount:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useEffect } from 'react';\\nimport { useWindowEvent } from '@mantine/hooks';\\n\\nconst handler = (event) => console.log(event);\\n\\n// regular way\\nuseEffect(() => {\\n  window.addEventListener('keydown', handler);\\n  return () => window.removeEventListener('keydown');\\n}, []);\\n\\n// with use-window-event hook\\nuseWindowEvent('keydown', handler);\\n\")), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"p\", null, \"Search focus with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u2318 + K\"), \" on mac or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ctrl + K\"), \" on windows and linux on Mantine docs website:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useRef } from 'react';\\nimport { useWindowEvent } from '@mantine/hooks';\\n\\nfunction Search() {\\n  const inputRef = useRef();\\n\\n  useWindowEvent('keydown', (event) => {\\n    if (event.code === 'KeyK' && (event.ctrlKey || event.metaKey)) {\\n      event.preventDefault();\\n      inputRef.current.focus();\\n    }\\n  });\\n\\n  return <input ref={inputRef} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"p\", null, \"Hook has exact same definition as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.addEventListener\"), \" function:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function useWindowEvent<K extends keyof WindowEventMap>(\\n  type: K,\\n  listener: (this: Window, ev: WindowEventMap[K]) => any,\\n  options?: boolean | AddEventListenerOptions\\n): void;\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"36401656-5761-5623-a2a4-ee536c7bc666","slug":"hooks/use-window-event","__params":{"slug":"hooks"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}