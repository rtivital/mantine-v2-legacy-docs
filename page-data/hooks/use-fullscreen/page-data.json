{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-fullscreen/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Custom root element"},{"depth":2,"value":"Definition"}],"frontmatter":{"title":"use-fullscreen","package":"@mantine/hooks","slug":"/hooks/use-fullscreen/","props":null,"import":"import { useFullscreen } from '@mantine/hooks';","docs":"hooks/use-fullscreen.mdx","source":"mantine-hooks/src/use-fullscreen/use-fullscreen.ts","description":"Enter/exit fullscreen with given element","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-hooks\",\n  \"package\": \"@mantine/hooks\",\n  \"category\": \"dom\",\n  \"title\": \"use-fullscreen\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-fullscreen/\",\n  \"description\": \"Enter/exit fullscreen with given element\",\n  \"import\": \"import { useFullscreen } from '@mantine/hooks';\",\n  \"docs\": \"hooks/use-fullscreen.mdx\",\n  \"source\": \"mantine-hooks/src/use-fullscreen/use-fullscreen.ts\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Hook allows to enter/exit fullscreen for given element using the \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API\"\n  }, \"Fullscreen API\"), \".\\nBy default if you don't provide ref, hook will target \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"document.documentElement\"), \":\"), mdx(Demo, {\n    data: useFullscreenDemo,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"custom-root-element\"\n  }, \"Custom root element\"), mdx(\"p\", null, \"Hook returns an optional ref function that can be passed to an element to act as root.\\nBe sure to follow best practices to not \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/Fullscreen_API/Guide#things_your_users_want_to_know\"\n  }, \"confuse or trap the end user\"), \":\"), mdx(Demo, {\n    data: useFullscreenRefDemo,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function useFullscreen<T extends HTMLElement = any>(): {\\n  readonly ref: (element: T | null) => void;\\n  readonly toggle: () => Promise<void>;\\n  readonly fullscreen: boolean;\\n};\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"49cec14c-f952-5221-affb-873ba14f595f","slug":"hooks/use-fullscreen","__params":{"slug":"hooks"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}