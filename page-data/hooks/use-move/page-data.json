{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-move/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"API"},{"depth":2,"value":"Examples"},{"depth":3,"value":"Horizontal slider"},{"depth":3,"value":"Vertical slider"},{"depth":3,"value":"Color picker"},{"depth":2,"value":"Definition"}],"frontmatter":{"title":"use-move","package":"@mantine/hooks","slug":"/hooks/use-move/","props":null,"import":"import { useMove } from '@mantine/hooks';","docs":"hooks/use-move.mdx","source":"mantine-hooks/src/use-move/use-move.ts","description":"Handles move behavior over any element, use to build custom sliders, color pickers, etc.","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-hooks\",\n  \"package\": \"@mantine/hooks\",\n  \"title\": \"use-move\",\n  \"category\": \"dom\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-move/\",\n  \"description\": \"Handles move behavior over any element, use to build custom sliders, color pickers, etc.\",\n  \"import\": \"import { useMove } from '@mantine/hooks';\",\n  \"docs\": \"hooks/use-move.mdx\",\n  \"source\": \"mantine-hooks/src/use-move/use-move.ts\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"use-move handles move behavior over any element:\"), mdx(Demo, {\n    data: useMoveUsage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"api\"\n  }, \"API\"), mdx(\"p\", null, \"Hook accepts callback that is called when user moves pressed mouse over given element and returns object with ref and active state:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const {\\n  ref, // -> pass ref to target element\\n  active, // -> is user changing something right now?\\n} = useMove(({ x, y }) => setValue({ x, y }));\\n\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"x\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"y\"), \" values are always between 0 and 1, you can use them to calculate value in your boundaries.\"), mdx(\"h2\", {\n    \"id\": \"examples\"\n  }, \"Examples\"), mdx(\"h3\", {\n    \"id\": \"horizontal-slider\"\n  }, \"Horizontal slider\"), mdx(\"p\", null, \"You can ignore changes for one of the axis:\"), mdx(Demo, {\n    data: useMoveHorizontal,\n    demoProps: {\n      toggle: true\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"h3\", {\n    \"id\": \"vertical-slider\"\n  }, \"Vertical slider\"), mdx(\"p\", null, \"Moving slider down increases value, to reverse that set value to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"1 - y\"), \" in your setValue function:\"), mdx(Demo, {\n    data: useMoveVertical,\n    demoProps: {\n      toggle: true\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"h3\", {\n    \"id\": \"color-picker\"\n  }, \"Color picker\"), mdx(Demo, {\n    data: useMoveColor,\n    demoProps: {\n      toggle: true\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function useMove<T extends HTMLElement = HTMLDivElement>(\\n  onChange: (value: { x: number; y: number }) => void\\n): {\\n  ref: React.MutableRefObject<T>;\\n  active: boolean;\\n};\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"652cb52f-a0fc-53db-84b0-a83fe7a43c9c","slug":"hooks/use-move","__params":{"slug":"hooks"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}