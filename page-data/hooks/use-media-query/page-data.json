{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-media-query/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"}],"frontmatter":{"title":"use-media-query","package":"@mantine/hooks","slug":"/hooks/use-media-query/","props":null,"import":"import { useMediaQuery } from '@mantine/hooks';","docs":"hooks/use-media-query.mdx","source":"mantine-hooks/src/use-media-query/use-media-query.ts","description":"Subscribe to media queries with window.matchMedia","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-hooks\",\n  \"package\": \"@mantine/hooks\",\n  \"title\": \"use-media-query\",\n  \"category\": \"dom\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-media-query/\",\n  \"description\": \"Subscribe to media queries with window.matchMedia\",\n  \"import\": \"import { useMediaQuery } from '@mantine/hooks';\",\n  \"docs\": \"hooks/use-media-query.mdx\",\n  \"source\": \"mantine-hooks/src/use-media-query/use-media-query.ts\"\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"use-media-query hook allows to subscribe to media queries.\\nIt receives media query as an argument and returns true\\nif given media query matches current state.\\nHook relies on \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.matchMedia()\"), \" \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/Window/matchMedia\"\n  }, \"API\"), \"\\nand will always return false if api is not available (e.g. during server side rendering).\"), mdx(\"p\", null, \"Hook takes media query as first argument and returns true if query is satisfied.\\nResize browser window to trigger \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"window.matchMedia\"), \" event:\"), mdx(Demo, {\n    data: useMediaQueryHook,\n    mdxType: \"Demo\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"dccd7497-527a-5a98-a938-b13f81f2b570","slug":"hooks/use-media-query","__params":{"slug":"hooks"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}