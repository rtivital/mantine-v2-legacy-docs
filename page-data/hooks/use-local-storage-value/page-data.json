{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/hooks/use-local-storage-value/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Example"},{"depth":2,"value":"Browser tabs synchronization"},{"depth":2,"value":"TypeScript"},{"depth":3,"value":"Definition"},{"depth":3,"value":"Set value type"}],"frontmatter":{"title":"use-local-storage-value","package":"@mantine/hooks","slug":"/hooks/use-local-storage-value/","props":null,"import":"import { useLocalStorageValue } from '@mantine/hooks';","docs":"hooks/use-local-storage-value.mdx","source":"mantine-hooks/src/use-local-storage-value/use-local-storage-value.ts","description":"Use localStorage value as react state, sync state across opened tabs","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-hooks\",\n  \"package\": \"@mantine/hooks\",\n  \"title\": \"use-local-storage-value\",\n  \"category\": \"state\",\n  \"order\": 1,\n  \"slug\": \"/hooks/use-local-storage-value/\",\n  \"description\": \"Use localStorage value as react state, sync state across opened tabs\",\n  \"import\": \"import { useLocalStorageValue } from '@mantine/hooks';\",\n  \"docs\": \"hooks/use-local-storage-value.mdx\",\n  \"source\": \"mantine-hooks/src/use-local-storage-value/use-local-storage-value.ts\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"use-local-storage-value allows you to use value from localStorage as react state.\\nHook works exactly the same as useState, but also writes value to local storage:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useLocalStorageValue } from '@mantine/hooks';\\n\\n// hook will read value from localStorage.getItem('color-scheme')\\n// if localStorage is not available or value at given key does not exist\\n// 'dark' will be assigned to value variable\\nconst [value, setValue] = useLocalStorageValue({ key: 'color-scheme', defaultValue: 'dark' });\\n\\n// Value is set both to state and localStorage at 'color-scheme'\\nsetValue('light');\\n\\n// You can also use callback like in useState hook to set value\\nsetValue((current) => (current === 'dark' ? 'light' : 'dark'));\\n\")), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"p\", null, \"Mantine docs website uses this hook to store color scheme information:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useLocalStorageValue } from '@mantine/hooks';\\nimport { ActionIcon } from '@mantine/core';\\nimport { SunIcon, MoonIcon } from '@modulz/radix-icons';\\n\\nfunction ColorSchemeToggle() {\\n  const [colorScheme, setColorScheme] = useLocalStorageValue({\\n    key: 'color-scheme',\\n    defaultValue: 'light',\\n  });\\n\\n  const toggleColorScheme = () =>\\n    setColorScheme((current) => (current === 'dark' ? 'light' : 'dark'));\\n\\n  return (\\n    <ActionIcon onClick={toggleColorScheme}>\\n      {colorScheme === 'dark' ? <SunIcon /> : <MoonIcon />}\\n    </ActionIcon>\\n  );\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"browser-tabs-synchronization\"\n  }, \"Browser tabs synchronization\"), mdx(\"p\", null, \"use-local-storage-value subscribes to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/Window/storage_event\"\n  }, \"storage event\"), \".\\nWhen state changes in one tab it automatically updates value in all other opened browser tabs.\\nYou can test this feature by opening 2 tabs with Mantine docs side by side and changing color scheme\\n(button on the top right or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"\\u2318 + J\"), \" on mac and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Ctrl + J\"), \" on Windows and Linux).\"), mdx(\"h2\", {\n    \"id\": \"typescript\"\n  }, \"TypeScript\"), mdx(\"h3\", {\n    \"id\": \"definition\"\n  }, \"Definition\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"function useLocalStorageValue<T extends string>(options: {\\n  key: string;\\n  defaultValue?: T;\\n}): [T, (val: T | ((prevState: T) => T)) => void];\\n\")), mdx(\"h3\", {\n    \"id\": \"set-value-type\"\n  }, \"Set value type\"), mdx(\"p\", null, \"You can specify value type same as in useState hook, type must extend string:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"type ColorScheme = 'dark' | 'light';\\n\\nconst [value, setValue] = useLocalStorageValue<ColorScheme>({\\n  key: 'color-scheme',\\n  defaultValue: 'light',\\n});\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"47d8d190-c1e5-5449-8f3d-1dddd41ee995","slug":"hooks/use-local-storage-value","__params":{"slug":"hooks"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}