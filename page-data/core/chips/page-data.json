{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/chips/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"States"},{"depth":2,"value":"Multiple"},{"depth":2,"value":"Controlled"},{"depth":2,"value":"Chip component"},{"depth":2,"value":"Server side rendering"},{"depth":2,"value":"Accessibility"}],"frontmatter":{"title":"Chips","package":"@mantine/core","slug":"/core/chips/","props":["Chips","Chip"],"import":"import { Chips, Chip } from '@mantine/core';","docs":"core/Chips.mdx","source":"mantine-core/src/components/Chips/Chips.tsx","description":"Alternative to Select and RadioGroup","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["Chips","Chip"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"Chips\",\n  \"order\": 1,\n  \"slug\": \"/core/chips/\",\n  \"category\": \"inputs\",\n  \"description\": \"Alternative to Select and RadioGroup\",\n  \"props\": [\"Chips\", \"Chip\"],\n  \"import\": \"import { Chips, Chip } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/Chips/Chips.tsx\",\n  \"docs\": \"core/Chips.mdx\",\n  \"styles\": [\"Chips\", \"Chip\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Use Chips as an inline alternative to \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/radio-group/\"\n  }, \"RadioGroup\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/multi-select/\"\n  }, \"MultiSelect\"), \" components:\"), mdx(Demo, {\n    data: ChipsDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"states\"\n  }, \"States\"), mdx(Demo, {\n    data: ChipsDemos.states,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"multiple\"\n  }, \"Multiple\"), mdx(\"p\", null, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"multiple\"), \" prop to enable multiple chips selection:\"), mdx(Demo, {\n    data: ChipsDemos.type,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"p\", null, \"Since Chips component supports both single and multiple state you will need to adjust your state to match \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"multiple\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { Chips } from '@mantine/core';\\n\\nfunction Demo() {\\n  // string value when multiple is false (default)\\n  const [value, setValue] = useState('react');\\n\\n  return (\\n    <Chips value={value} onChange={setValue}>\\n      <Chip value=\\\"react\\\">React</Chip>\\n      <Chip value=\\\"ng\\\">Angular</Chip>\\n      <Chip value=\\\"svelte\\\">Svelte</Chip>\\n      <Chip value=\\\"vue\\\">Vue</Chip>\\n    </Chips>\\n  );\\n}\\n\\nfunction Demo() {\\n  // array of strings value when multiple is true\\n  const [value, setValue] = useState(['react']);\\n\\n  return (\\n    <Chips value={value} onChange={setValue} multiple>\\n      <Chip value=\\\"react\\\">React</Chip>\\n      <Chip value=\\\"ng\\\">Angular</Chip>\\n      <Chip value=\\\"svelte\\\">Svelte</Chip>\\n      <Chip value=\\\"vue\\\">Vue</Chip>\\n    </Chips>\\n  );\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"chip-component\"\n  }, \"Chip component\"), mdx(\"p\", null, \"You can use Chip component outside of Chips:\"), mdx(Demo, {\n    data: ChipsDemos.chip,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"server-side-rendering\"\n  }, \"Server side rendering\"), mdx(\"p\", null, \"Both Chip and Chips component use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-id/\"\n  }, \"use-id\"), \" hook to generate unique ids to connect inputs with labels,\\nprovide static \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" prop to prevent props mismatch:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Chips /> // random id generated both on client and server, props mismatch warning\\n<Chip /> // random id generated both on client and server, props mismatch warning\\n\\n// -> id is static, no mismatches\\n<Chip id=\\\"my-chip\\\" />\\n\\n// -> id is static, no mismatches\\n<Chips id=\\\"my-chips-picker\\\">\\n  {/* It's not required to set id on Chip component when it is used inside Chips */}\\n  <Chip value=\\\"react\\\">React</Chip>\\n</Chips>\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, \"Chip and Chips components are accessible by default since they are built with native radio/checkbox inputs,\\nall keyboard events works the same as with native controls.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"13066353-10f0-55d0-a12a-635ccd8e46c7","slug":"core/Chips","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}