{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/tooltip/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Position and placement"},{"depth":2,"value":"Arrow"},{"depth":2,"value":"Controlled"},{"depth":2,"value":"Multiline"},{"depth":2,"value":"Change transition"},{"depth":2,"value":"Change color"},{"depth":2,"value":"Close delay"},{"depth":2,"value":"Allow pointer events"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"Accessibility"}],"frontmatter":{"title":"Tooltip","package":"@mantine/core","slug":"/core/tooltip/","props":["Tooltip"],"import":"import { Tooltip } from '@mantine/core';","docs":"core/Tooltip.mdx","source":"mantine-core/src/components/Tooltip/Tooltip.tsx","description":"Renders tooltip at given element on mouse over or any other event","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["Tooltip"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"Tooltip\",\n  \"order\": 1,\n  \"slug\": \"/core/tooltip/\",\n  \"category\": \"overlay\",\n  \"description\": \"Renders tooltip at given element on mouse over or any other event\",\n  \"props\": [\"Tooltip\"],\n  \"import\": \"import { Tooltip } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/Tooltip/Tooltip.tsx\",\n  \"docs\": \"core/Tooltip.mdx\",\n  \"styles\": [\"Tooltip\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Use tooltip to provide additional information for target element or component:\"), mdx(Demo, {\n    data: TooltipDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"position-and-placement\"\n  }, \"Position and placement\"), mdx(\"p\", null, \"Tooltip position relative to target element is defined by:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"position\"), \" \\u2013 tooltip side \\u2013 top, bottom, right or left, defaults to top\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"placement\"), \" \\u2013 tooltip placement relative to position \\u2013 start, center or end, defaults to center\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"gutter\"), \" \\u2013 space between tooltip and target element in px, defaults to 5px\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Tooltip position=\\\"bottom\\\" placement=\\\"end\\\" gutter={10} />\\n\")), mdx(\"p\", null, \"All available positions and placements:\"), mdx(Demo, {\n    data: TooltipDemos.positions,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"arrow\"\n  }, \"Arrow\"), mdx(\"p\", null, \"Tooltip arrow is controlled by:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"withArrow\"), \" \\u2013 set to true if arrow should be rendered\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"arrowSize\"), \" \\u2013 arrow size in px, defaults to 4px\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"position\"), \" and \", mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"placement\"), \" \\u2013 define arrow position (see previous example)\")), mdx(Demo, {\n    data: TooltipDemos.arrow,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"p\", null, \"By default tooltip is displayed when mouse is over target element.\\nYou can change this logic by setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opened\"), \" prop:\"), mdx(Demo, {\n    data: TooltipDemos.controlled,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"multiline\"\n  }, \"Multiline\"), mdx(\"p\", null, \"By default tooltip white-space property is set to nowrap. To change that use:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"wrapLines\"), \" \\u2013 to enable line breaks\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"width\"), \" \\u2013 to define tooltip width in px\")), mdx(\"p\", null, \"Note that, multiline tooltips may require different transitions for better UX.\"), mdx(Demo, {\n    data: TooltipDemos.multiline,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"change-transition\"\n  }, \"Change transition\"), mdx(\"p\", null, \"Tooltip is built with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/transition/\"\n  }, \"Transition\"), \" component.\"), mdx(\"p\", null, \"You can change transitions with props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"transition\"), \" \\u2013 predefined transition name or transition object\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"transitionDuration\"), \" \\u2013 transition duration in ms, defaults to 100ms\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"transitionTimingFunction\"), \" \\u2013 timing function, defaults to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"theme.transitionTimingFunction\"))), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Tooltip transition=\\\"skew-up\\\" transitionDuration={300} transitionTimingFunction=\\\"ease\\\" />\\n\")), mdx(\"p\", null, \"All available predefined transitions demo:\"), mdx(Demo, {\n    data: TooltipDemos.transitions,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"change-color\"\n  }, \"Change color\"), mdx(\"p\", null, \"You can choose any color defined in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/theming/extend-theme/#default-colors\"\n  }, \"theme.colors\"), \":\"), mdx(Demo, {\n    data: TooltipDemos.colors,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"close-delay\"\n  }, \"Close delay\"), mdx(\"p\", null, \"You can delay tooltip unmount on mouse leave with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"delay\"), \" prop: set delay in ms.\\nDelay defaults to 0 and reset if user hovers over target element before delay is expired:\"), mdx(Demo, {\n    data: TooltipDemos.delay,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"allow-pointer-events\"\n  }, \"Allow pointer events\"), mdx(\"p\", null, \"By defaults pointer events on tooltip are disabled to prevent animations collisions.\\nIf you need to use interactive elements inside tooltip set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"allowPointerEvents\"), \" prop.\"), mdx(\"p\", null, \"In this example tooltip acts more like popover \\u2013\\nit is controlled and can be closed with control inside tooltip:\"), mdx(Demo, {\n    data: TooltipDemos.pointerEvents,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get both tooltip and root element refs with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tooltipRef\"), \" props.\\nUse it to customize behavior, for example, with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-click-outside/\"\n  }, \"use-click-outside\"), \" hook.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useRef } from 'react';\\nimport { Tooltip } from '@mantine/core';\\n\\nfunction Demo() {\\n  const tooltipRef = useRef();\\n  const rootElementRef = useRef();\\n  return <Tooltip elementRef={rootElementRef} tooltipRef={tooltipRef} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, \"Do not place any important information in tooltip.\\nComponent is unmounted from the dom and is not visible to screen readers in default configuration.\"), mdx(\"p\", null, \"If you want to make tooltip accessible use controlled variant, open tooltip on focus, provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"tooltipId\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-describedby\"), \" props:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { Tooltip, Button } from '@mantine/core';\\n\\nfunction Demo() {\\n  const [opened, setOpened] = useState(false);\\n  return (\\n    <Tooltip opened={opened} label=\\\"Hidden knowledge\\\" tooltipId=\\\"tooltip-id\\\">\\n      <Button\\n        aria-describedby=\\\"tooltip-id\\\"\\n        onFocus={() => setOpened(true)}\\n        onMouseEnter={() => setOpened(true)}\\n        onBlur={() => setOpened(false)}\\n        onMouseLeave={() => setOpened(false)}\\n      >\\n        I have tooltip\\n      </Button>\\n    </Tooltip>\\n  );\\n}\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"75d37f0a-2ad4-5acd-a304-1d3ef6eccb36","slug":"core/Tooltip","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}