{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/color-input/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Controlled"},{"depth":2,"value":"Formats"},{"depth":2,"value":"Disable free input"},{"depth":2,"value":"With swatches"},{"depth":2,"value":"Remove or replace preview"},{"depth":2,"value":"Input props"},{"depth":2,"value":"Right section"},{"depth":2,"value":"Disabled state"},{"depth":2,"value":"Validation state and error"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"Server side rendering"},{"depth":2,"value":"Accessibility"}],"frontmatter":{"title":"ColorInput","package":"@mantine/core","slug":"/core/color-input/","props":["ColorInput"],"import":"import { ColorInput } from '@mantine/core';","docs":"core/ColorInput.mdx","source":"mantine-core/src/components/ColorInput/ColorInput.tsx","description":"Capture color data from user","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["ColorInput"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"ColorInput\",\n  \"order\": 1,\n  \"slug\": \"/core/color-input/\",\n  \"category\": \"inputs\",\n  \"description\": \"Capture color data from user\",\n  \"props\": [\"ColorInput\"],\n  \"import\": \"import { ColorInput } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/ColorInput/ColorInput.tsx\",\n  \"docs\": \"core/ColorInput.mdx\",\n  \"styles\": [\"ColorInput\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(Demo, {\n    data: ColorInputDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { ColorInput } from '@mantine/core';\\n\\nfunction Demo() {\\n  const [value, setValue] = useState('');\\n  return <ColorInput value={value} onChange={(event) => setValue(event.currentTarget.value)} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"formats\"\n  }, \"Formats\"), mdx(\"p\", null, \"Component supports hex, rgb, rgba, hsl and hsla color formats.\\nSlider to change opacity is displayed only for rgba and hsla formats:\"), mdx(Demo, {\n    data: ColorInputDemos.formatsConfigurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"disable-free-input\"\n  }, \"Disable free input\"), mdx(\"p\", null, \"To disable free input set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"disallowInput\"), \" prop:\"), mdx(Demo, {\n    data: ColorInputDemos.readOnly,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"with-swatches\"\n  }, \"With swatches\"), mdx(\"p\", null, \"You can add any amount of predefined color swatches:\"), mdx(Demo, {\n    data: ColorInputDemos.swatches,\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"By default there will be 10 swatches per row, you can change this with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"swatchesPerRow\"), \" prop,\\nlike in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/color-picker/\"\n  }, \"ColorPicker\"), \" component:\"), mdx(Demo, {\n    data: ColorPickerDemos.swatchesConfigurator,\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"If you need to restrict color picking to certain colors \\u2013 disable color picker and disallow free input:\"), mdx(Demo, {\n    data: ColorInputDemos.swatchesOnly,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"remove-or-replace-preview\"\n  }, \"Remove or replace preview\"), mdx(\"p\", null, \"By default color preview will be rendered on the left side of the input,\\nyou can remove it (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"withPreview={false}\"), \" prop) or replace with any React node (\", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"icon\"), \" prop):\"), mdx(Demo, {\n    data: ColorInputDemos.icon,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"input-props\"\n  }, \"Input props\"), mdx(\"p\", null, \"Component supports all props from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/input/\"\n  }, \"Input\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/input-wrapper/\"\n  }, \"InputWrapper\"), \" components:\"), mdx(Demo, {\n    data: ColorInputDemos.inputConfigurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"right-section\"\n  }, \"Right section\"), mdx(\"p\", null, \"Like most other inputs ColorInput supports right section,\\nfor example, you can add random color button there:\"), mdx(Demo, {\n    data: ColorInputDemos.rightSection,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"disabled-state\"\n  }, \"Disabled state\"), mdx(Demo, {\n    data: ColorInputDemos.disabled,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"validation-state-and-error\"\n  }, \"Validation state and error\"), mdx(Demo, {\n    data: ColorInputDemos.validation,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get input ref with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useRef } from 'react';\\nimport { ColorInput } from '@mantine/core';\\n\\nfunction Demo() {\\n  const ref = useRef(null);\\n  return <ColorInput elementRef={ref} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"server-side-rendering\"\n  }, \"Server side rendering\"), mdx(\"p\", null, \"Component uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-id/\"\n  }, \"use-id\"), \" hook to generate unique ids and aria- attributes,\\nprovide static \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" prop to prevent props mismatch:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<ColorInput /> // -> random id generated both on client and server, props mismatch warning\\n<ColorInput id=\\\"my-input\\\" /> // -> id is static, no mismatches\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, \"Provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label\"), \" in case you use component without label for screen reader support:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<ColorInput label=\\\"My input\\\" />; // -> ok, input and label is connected\\n<ColorInput />; // not ok, input is not labeled\\n<ColorInput aria-label=\\\"My input\\\" />; // -> ok, label is not visible but will be announced by screen reader\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"d3b3d0d8-87a7-5c72-85e2-43178d892c19","slug":"core/ColorInput","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}