{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/slider/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Controlled"},{"depth":2,"value":"Control label"},{"depth":2,"value":"Min, max and step"},{"depth":2,"value":"Marks"},{"depth":2,"value":"Styles API"},{"depth":2,"value":"Accessibility and usability"}],"frontmatter":{"title":"Slider","package":"@mantine/core","slug":"/core/slider/","props":["Slider","RangeSlider"],"import":"import { Slider, RangeSlider } from '@mantine/core';","docs":"core/Slider.mdx","source":"mantine-core/src/components/Slider","description":"Capture user feedback from a range of values","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["Slider","RangeSlider"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"Slider\",\n  \"order\": 1,\n  \"slug\": \"/core/slider/\",\n  \"category\": \"inputs\",\n  \"description\": \"Capture user feedback from a range of values\",\n  \"props\": [\"Slider\", \"RangeSlider\"],\n  \"import\": \"import { Slider, RangeSlider } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/Slider\",\n  \"docs\": \"core/Slider.mdx\",\n  \"styles\": [\"Slider\", \"RangeSlider\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(Demo, {\n    data: SliderDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"p\", null, \"By default both Slider and RangeSlider are uncontrolled, add onChange and value props to make them controlled:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { Slider, RangeSlider } from '@mantine/core';\\n\\nfunction Demo() {\\n  const [value, setValue] = useState(40);\\n  const [rangeValue, setRangeValue] = useState([20, 80]);\\n\\n  return (\\n    <>\\n      <Slider value={value} onChange={setValue} />\\n      <RangeSlider value={rangeValue} onChange={setRangeValue} />\\n    </>\\n  );\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"control-label\"\n  }, \"Control label\"), mdx(\"p\", null, \"To change label behavior and appearance set props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"label\"), \" \\u2013 formatter function, accepts value as an argument, set to null to disable label, defaults to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"f => f\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"labelAlwaysOn\"), \" \\u2013 if true \\u2013 label will always be displayed, by default label is visible only when user is dragging\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"labelTransition\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"labelTransitionDuration\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"labelTransitionTimingFunction\"), \" \\u2013 label uses \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/core/transition/\"\n  }, \"Transition\"), \" component to animate presence, you can choose any premade transition or create your own\")), mdx(Demo, {\n    data: SliderDemos.label,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"min-max-and-step\"\n  }, \"Min, max and step\"), mdx(Demo, {\n    data: SliderDemos.step,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"marks\"\n  }, \"Marks\"), mdx(\"p\", null, \"Add any amount of marks to slider by setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"marks\"), \" prop to an array of objects:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const marks = [\\n  { value: 20 }, // -> displays mark on slider track\\n  { value: 40, label: '40%' }, // -> adds mark label below slider track\\n];\\n\")), mdx(\"p\", null, \"Note that mark value is relative to slider value, not width:\"), mdx(Demo, {\n    data: SliderDemos.marks,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"styles-api\"\n  }, \"Styles API\"), mdx(\"p\", null, \"You can change styles of any element in slider component with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/theming/styles-api/\"\n  }, \"Styles API\"), \" to match your design requirements:\"), mdx(Demo, {\n    data: SliderDemos.customize,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"accessibility-and-usability\"\n  }, \"Accessibility and usability\"), mdx(\"p\", null, \"Slider and RangeSlider components are accessible by default:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Slider thumbs are focusable\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When user uses mouse to interact with slider, focus is moved on slider track, when user presses arrows focus is moved on thumb\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Value can be changed with arrows with step increment/decrement\")), mdx(\"p\", null, \"To label component for screen readers add labels to thumbs:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Slider thumbLabel=\\\"Thumb aria-label\\\" />\\n<RangeSlider thumbFromLabel=\\\"First thumb aria-label\\\" thumbToLabel=\\\"Second thumb aria-label\\\" />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"0d6aff60-01da-5435-ac4e-fd6231f89943","slug":"core/Slider","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}