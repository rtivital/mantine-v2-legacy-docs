{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/autocomplete/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Controlled"},{"depth":2,"value":"Data prop"},{"depth":2,"value":"Dynamic data"},{"depth":2,"value":"Custom item component"},{"depth":2,"value":"Limit amount of options"},{"depth":2,"value":"Animations"},{"depth":2,"value":"With icon"},{"depth":2,"value":"Invalid state and error"},{"depth":2,"value":"Disabled state"},{"depth":2,"value":"Input props"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"Server side rendering"},{"depth":2,"value":"Accessibility"}],"frontmatter":{"title":"Autocomplete","package":"@mantine/core","slug":"/core/autocomplete/","props":["Autocomplete"],"import":"import { Autocomplete } from '@mantine/core';","docs":"core/Autocomplete.mdx","source":"mantine-core/src/components/Autocomplete/Autocomplete.tsx","description":"Autocomplete user input with any list of options","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["Autocomplete"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"Autocomplete\",\n  \"order\": 1,\n  \"slug\": \"/core/autocomplete/\",\n  \"category\": \"inputs\",\n  \"description\": \"Autocomplete user input with any list of options\",\n  \"props\": [\"Autocomplete\"],\n  \"import\": \"import { Autocomplete } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/Autocomplete/Autocomplete.tsx\",\n  \"docs\": \"core/Autocomplete.mdx\",\n  \"styles\": [\"Autocomplete\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Autocomplete is an input with which you can suggest user to select one of the given values\\n(if you need to force specific values without free input use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/select/\"\n  }, \"Select\"), \"):\"), mdx(Demo, {\n    data: AutocompleteDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { Autocomplete } from '@mantine/core';\\n\\nfunction Demo() {\\n  const [value, setValue] = useState('');\\n  return <Autocomplete value={value} onChange={setValue} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"data-prop\"\n  }, \"Data prop\"), mdx(\"p\", null, \"Autocomplete support two different data formats:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"An array of strings \\u2013 use when you do not need to customize item component\"), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"An array of objects with required \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\"), \" property and any other additional properties\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Data as an array of strings\\n<Autocomplete data={['React', 'Angular', 'Svelte', 'Vue']} />\\n\\n// Data as an array of objects:\\n// Minimal example (same as first example above)\\n<Autocomplete data={[\\n  { value: 'React' },\\n  { value: 'Angular' },\\n  { value: 'Svelte' },\\n  { value: 'Vue' },\\n]} />\\n\\n// Additional data properties for custom item component (see documentation below)\\n<Autocomplete\\n  itemComponent={({ value, color, email, name }) => /* Your custom item component with data properties */}\\n  data={[\\n    { value: 'bob@handsome.inc', color: 'red', email: 'bob@handsome.inc', name: 'Bob Handsome' },\\n    { value: 'bill@outlook.com', color: 'teal', email: 'bill@outlook.com', name: 'Bill Gates' },\\n    { value: 'amy@wong.cn', color: 'blue', email: 'amy@wong.cn', name: 'Amy Wong' },\\n  ]}\\n/>\\n\")), mdx(\"h2\", {\n    \"id\": \"dynamic-data\"\n  }, \"Dynamic data\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" prop can have dynamic values:\"), mdx(Demo, {\n    data: AutocompleteDemos.dynamic,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"custom-item-component\"\n  }, \"Custom item component\"), mdx(\"p\", null, \"You can change autocomplete item component and filtering logic that is used in search.\\nTo do so you will need to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add extra props to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"data\"), \" objects\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"filter\"), \" function which determines whether item should be added to the search results\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Provide \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"itemComponent\"), \" which will consume \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"data\"), \" objects\")), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \" prop must be an array of objects with required \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" field:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"[\\n  { value: 'bob@handsome.inc', color: 'red', email: 'bob@handsome.inc', name: 'Bob Handsome' },\\n  { value: 'bill@outlook.com', color: 'teal', email: 'bill@outlook.com', name: 'Bill Gates' },\\n  { value: 'amy@wong.cn', color: 'blue', email: 'amy@wong.cn', name: 'Amy Wong' },\\n];\\n\")), mdx(\"p\", null, \"Based on this data shape you can create custom \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filter\"), \" function and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemComponent\"), \":\"), mdx(Demo, {\n    data: AutocompleteDemos.itemComponent,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"limit-amount-of-options\"\n  }, \"Limit amount of options\"), mdx(\"p\", null, \"By default Autocomplete will render 5 items at a time, to change that set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"limit\"), \" prop:\"), mdx(Demo, {\n    data: AutocompleteDemos.limit,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"animations\"\n  }, \"Animations\"), mdx(\"p\", null, \"By default dropdown animations are turned off to increase responsiveness.\\nYou can enable them by setting optional props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"transition\"), \" \\u2013 premade transition name or custom transition styles object, see \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/core/transition/\"\n  }, \"Transition\"), \" component for all available options\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"transitionDuration\"), \" \\u2013 transition duration in ms, defaults to 0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"transitionTimingFunction\"), \" \\u2013 defaults to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"theme.transitionTimingFunction\"))), mdx(Demo, {\n    data: AutocompleteDemos.animations,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"with-icon\"\n  }, \"With icon\"), mdx(\"p\", null, \"You can use any React node as in icon:\"), mdx(Demo, {\n    data: AutocompleteDemos.icon,\n    demoProps: {\n      zIndex: 4\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"invalid-state-and-error\"\n  }, \"Invalid state and error\"), mdx(Demo, {\n    data: AutocompleteDemos.validation,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"disabled-state\"\n  }, \"Disabled state\"), mdx(Demo, {\n    data: AutocompleteDemos.disabled,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"input-props\"\n  }, \"Input props\"), mdx(\"p\", null, \"Component supports all props from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/input/\"\n  }, \"Input\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/input-wrapper/\"\n  }, \"InputWrapper\"), \" components:\"), mdx(Demo, {\n    data: AutocompleteDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get input ref with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useRef } from 'react';\\nimport { Autocomplete } from '@mantine/core';\\n\\nfunction Demo() {\\n  const ref = useRef(null);\\n  return <Autocomplete elementRef={ref} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"server-side-rendering\"\n  }, \"Server side rendering\"), mdx(\"p\", null, \"Component uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-id/\"\n  }, \"use-id\"), \" hook to generate unique ids and aria- attributes,\\nprovide static \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" prop to prevent props mismatch:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Autocomplete /> // -> random id generated both on client and server, props mismatch warning\\n<Autocomplete id=\\\"my-autocomplete\\\" /> // -> id is static, no mismatches\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, \"Provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label\"), \" in case you use component without label for screen reader support:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Autocomplete label=\\\"My input\\\" />; // -> ok, input and label is connected\\n<Autocomplete />; // not ok, input is not labeled\\n<Autocomplete aria-label=\\\"My input\\\" />; // -> ok, label is not visible but will be announced by screen reader\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"32421de7-446e-50c1-9b84-cf0e36bc97d0","slug":"core/Autocomplete","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}