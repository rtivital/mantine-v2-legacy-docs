{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/action-icon/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Icons"},{"depth":2,"value":"Where to use"},{"depth":2,"value":"Variants"},{"depth":2,"value":"Color"},{"depth":2,"value":"Size and radius"},{"depth":2,"value":"Usage with react-router and other libraries"},{"depth":2,"value":"Usage with Next Link"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"Close button"},{"depth":2,"value":"Accessibility"}],"frontmatter":{"title":"ActionIcon","package":"@mantine/core","slug":"/core/action-icon/","props":["ActionIcon"],"import":"import { ActionIcon } from '@mantine/core';","docs":"core/ActionIcon.mdx","source":"mantine-core/src/components/ActionIcon/ActionIcon.tsx","description":"Icon button to indicate secondary action","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["ActionIcon","single-node"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"ActionIcon\",\n  \"order\": 1,\n  \"slug\": \"/core/action-icon/\",\n  \"category\": \"inputs\",\n  \"description\": \"Icon button to indicate secondary action\",\n  \"props\": [\"ActionIcon\"],\n  \"import\": \"import { ActionIcon } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/ActionIcon/ActionIcon.tsx\",\n  \"docs\": \"core/ActionIcon.mdx\",\n  \"styles\": [\"ActionIcon\", \"single-node\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar DataTable = makeShortcode(\"DataTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(Demo, {\n    data: ActionIconDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"icons\"\n  }, \"Icons\"), mdx(\"p\", null, \"You can use icons from any react icons library, for example, \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://icons.modulz.app/\"\n  }, \"radix icons\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://feathericons.com/\"\n  }, \"feather icons\"), \" or \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://react-icons.github.io/react-icons\"\n  }, \"react-icons\"), \".\\nNote that component \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"does not control icon size\"), \" and you need to specify it manually on icon component for better fit:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<ActionIcon>\\n  <YourIcon style={{ width: 16, height: 16 }} />\\n</ActionIcon>\\n\")), mdx(\"h2\", {\n    \"id\": \"where-to-use\"\n  }, \"Where to use\"), mdx(\"p\", null, \"Password input visibility toggle example:\"), mdx(Demo, {\n    data: ActionIconDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"variants\"\n  }, \"Variants\"), mdx(\"p\", null, \"ActionIcon has 5 variants: hover (default), transparent, filled, light and outline:\"), mdx(Demo, {\n    data: ActionIconDemos.variants,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"color\"\n  }, \"Color\"), mdx(\"p\", null, \"You can choose any color defined in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/theming/extend-theme/#default-colors\"\n  }, \"theme.colors\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<ActionIcon color=\\\"red\\\" />\\n<ActionIcon color=\\\"blue\\\" />\\n\")), mdx(Demo, {\n    data: ActionIconDemos.colors,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"size-and-radius\"\n  }, \"Size and radius\"), mdx(\"p\", null, \"Control button width and height with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" and border-radius with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"radius\"), \".\\nBoth props have predefined values: xs, sm, md, lg, xl.\\nAlternatively, you can use a number to set radius or size in px:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<ActionIcon radius=\\\"lg\\\" /> // -> theme predefined large radius\\n<ActionIcon radius={10} /> // -> { borderRadius: '10px' }\\n\\n<ActionIcon size=\\\"sm\\\" /> // -> predefined small size\\n<ActionIcon size={50} /> // -> { width: '50px', height: '50px' }\\n\")), mdx(Demo, {\n    data: ActionIconDemos.sizes,\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"You can get default sizes values by importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ACTION_ICON_SIZES\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { ACTION_ICON_SIZES } from '@mantine/core';\\n\")), mdx(DataTable, {\n    head: ['Prop value', 'Width and height'],\n    data: Object.keys(ACTION_ICON_SIZES).map(function (size) {\n      return [size, \"\".concat(ACTION_ICON_SIZES[size], \"px\")];\n    }),\n    mdxType: \"DataTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage-with-react-router-and-other-libraries\"\n  }, \"Usage with react-router and other libraries\"), mdx(\"p\", null, \"You can use ActionIcon component with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactrouter.com/web/guides/quick-start\"\n  }, \"react-router-dom\"), \"\\nor other similar libraries by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Link\"), \" as component to ActionIcon:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { Link } from 'react-router-dom';\\nimport { ActionIcon } from '@mantine/core';\\n\\nfunction Demo() {\\n  return (\\n    <ActionIcon component={Link} to=\\\"/react-router\\\">\\n      React router link\\n    </ActionIcon>\\n  );\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"usage-with-next-link\"\n  }, \"Usage with Next Link\"), mdx(\"p\", null, \"Next Link component requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ref\"), \" prop usage, however all Mantine components use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \",\\nto make ActionIcon and other similar components work with Next Link, create wrapper component in your components folder:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// This component can be reused in every Mantine component which supports component pass through\\nimport React, { forwardRef } from 'react';\\nimport Link from 'next/link';\\n\\nexport const NextLink = forwardRef(\\n  (\\n    { href, ...others }: React.ComponentPropsWithoutRef<typeof Link>,\\n    ref: React.ForwardedRef<HTMLAnchorElement>\\n  ) => (\\n    <Link href={href}>\\n      {/* eslint-disable-next-line jsx-a11y/anchor-has-content */}\\n      <a {...others} ref={ref} />\\n    </Link>\\n  )\\n);\\n\")), mdx(\"p\", null, \"And then pass it to Button or other component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<ActionIcon component={NextLink} href=\\\"/hello\\\">\\n  <MyIcon />\\n</ActionIcon>\\n\")), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get button ref with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useRef } from 'react';\\nimport { ActionIcon } from '@mantine/core';\\n\\nfunction Demo() {\\n  const ref = useRef();\\n  return <ActionIcon elementRef={ref} />;\\n}\\n\")), mdx(\"p\", null, \"To use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" with custom component in TypeScript you will need to specify generic types:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Simple variant with function ref \\u2013 specify type on node itself:\\n<ActionIcon component=\\\"a\\\" elementRef={(node: HTMLAnchorElement) => {}} />;\\n\\n// Variant with ref object \\u2013 provide generic arguments:\\nconst myRef = useRef<HTMLAnchorElement>();\\n<ActionIcon<'a', HTMLAnchorElement> component=\\\"a\\\" elementRef={myRef} />;\\n\")), mdx(\"h2\", {\n    \"id\": \"close-button\"\n  }, \"Close button\"), mdx(\"p\", null, \"CloseButton is a premade ActionIcon with close icon, it is used in all other components: \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/popover/\"\n  }, \"Popover\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/modal/\"\n  }, \"Modal\"), \", \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/Notification/\"\n  }, \"Notification\"), \", etc.\\nComponent accepts the same props as ActionIcon with additional \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"iconSize\"), \" prop to control icon width and height:\"), mdx(Demo, {\n    data: ActionIconDemos.closeButton,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, \"ActionIcon renders a regular button element.\\nInclude \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"title\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label\"), \" props for screen reader support\\nas by design element does not associated label.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Set title to show message on hover\\n<ActionIcon title=\\\"Settings\\\">\\n  <GearIcon />\\n</ActionIcon>\\n\\n// Set aria-label to announce control with screen reader\\n<ActionIcon aria-label=\\\"Settings\\\">\\n  <GearIcon />\\n</ActionIcon>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"33607d17-cec4-5125-956c-27a667f32239","slug":"core/ActionIcon","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}