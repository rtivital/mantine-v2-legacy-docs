{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/number-input/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Clamp on blur"},{"depth":2,"value":"Min, max and step"},{"depth":2,"value":"Decimal steps"},{"depth":2,"value":"Remove controls"},{"depth":2,"value":"Custom increment/decrement controls"},{"depth":2,"value":"Controlled"},{"depth":2,"value":"Invalid state and error"},{"depth":2,"value":"Disabled state"},{"depth":2,"value":"With icon"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"Server side rendering"},{"depth":2,"value":"Accessibility"}],"frontmatter":{"title":"NumberInput","package":"@mantine/core","slug":"/core/number-input/","props":["NumberInput"],"import":"import { NumberInput } from '@mantine/core';","docs":"core/NumberInput.mdx","source":"mantine-core/src/components/NumberInput/NumberInput.tsx","description":"Capture number input from user","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["NumberInput"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"NumberInput\",\n  \"order\": 1,\n  \"slug\": \"/core/number-input/\",\n  \"category\": \"inputs\",\n  \"description\": \"Capture number input from user\",\n  \"props\": [\"NumberInput\"],\n  \"import\": \"import { NumberInput } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/NumberInput/NumberInput.tsx\",\n  \"docs\": \"core/NumberInput.mdx\",\n  \"styles\": [\"NumberInput\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"NumberInput is based on \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/text-input/\"\n  }, \"TextInput\"), \"\\nand supports the same props, except \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rightSection\"), \".\"), mdx(Demo, {\n    data: NumberInputDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"clamp-on-blur\"\n  }, \"Clamp on blur\"), mdx(\"p\", null, \"Component has internal state to manage user input, when blur event is triggered\\ninternal value is clamped with given min and max values and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" handler is called with result.\"), mdx(\"p\", null, \"For example, if you put \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"123\"), \" or \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-20\"), \" in age input in next example, values will be clamped on blur: \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"123 -> 120\"), \", \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"-20 -> 0\"), \".\\nIf you want to disable this behavior set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"noClampOnBlur\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<NumberInput noClampOnBlur />\\n\")), mdx(\"h2\", {\n    \"id\": \"min-max-and-step\"\n  }, \"Min, max and step\"), mdx(\"p\", null, \"Min and max values define upper and lower value which may be entered.\\nWhen user clicks controls or presses up/down arrows value is incremented/decremented by step:\"), mdx(Demo, {\n    data: NumberInputDemos.step,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"decimal-steps\"\n  }, \"Decimal steps\"), mdx(\"p\", null, \"To use decimal steps set following props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"step\"), \" \\u2013 decimal number, e.g. \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"0.05\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"precision\"), \" \\u2013 amount of significant digits\")), mdx(Demo, {\n    data: NumberInputDemos.decimal,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"remove-controls\"\n  }, \"Remove controls\"), mdx(\"p\", null, \"Controls are not rendered in these cases:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"hideControls\"), \" prop is set to true\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Input is disabled\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"variant\"), \" prop is set to unstyled\")), mdx(Demo, {\n    data: NumberInputDemos.controls,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"custom-incrementdecrement-controls\"\n  }, \"Custom increment/decrement controls\"), mdx(\"p\", null, \"NumberInput exposes increment/decrement functions with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"handlersRef\"), \" prop.\\nYou can use it to create custom controls:\"), mdx(Demo, {\n    data: NumberInputDemos.handlers,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"p\", null, \"NumberInput does not expose input event in onChange handler, it provides value instead:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { NumberInput } from '@mantine/core';\\n\\nfunction Demo() {\\n  const [value, setValue] = useState(0);\\n  return <NumberInput value={value} onChange={(val) => setValue(val)} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"invalid-state-and-error\"\n  }, \"Invalid state and error\"), mdx(Demo, {\n    data: NumberInputDemos.validation,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"disabled-state\"\n  }, \"Disabled state\"), mdx(\"p\", null, \"Controls to increment/decrement value are not displayed when input is disabled:\"), mdx(Demo, {\n    data: NumberInputDemos.disabled,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"with-icon\"\n  }, \"With icon\"), mdx(\"p\", null, \"You can use any React node as icon:\"), mdx(Demo, {\n    data: NumberInputDemos.icon,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get input ref with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useRef } from 'react';\\nimport { NumberInput } from '@mantine/core';\\n\\nfunction Demo() {\\n  const ref = useRef(null);\\n  return <NumberInput elementRef={ref} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"server-side-rendering\"\n  }, \"Server side rendering\"), mdx(\"p\", null, \"Component uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-id/\"\n  }, \"use-id\"), \" hook to generate unique ids and aria- attributes,\\nprovide static \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" prop to prevent props mismatch:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<NumberInput /> // -> random id generated both on client and server, props mismatch warning\\n<NumberInput id=\\\"my-number-input\\\" /> // -> id is static, no mismatches\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, \"NumberInput renders regular input with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"type=\\\"number\\\"\"), \".\\nIncrement/decrement controls have \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-hidden\"), \" attribute and cannot be focused.\"), mdx(\"p\", null, \"Provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label\"), \" in case you use component without label for screen reader support:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<NumberInput label=\\\"My input\\\" />; // -> ok, input and label is connected\\n<NumberInput />; // not ok, input is not labeled\\n<NumberInput aria-label=\\\"My input\\\" />; // -> ok, label is not visible but will be announced by screen reader\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"04656593-2a7f-540d-9b31-9b907c61847a","slug":"core/NumberInput","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}