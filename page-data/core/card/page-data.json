{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/card/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Card.Section"},{"depth":2,"value":"Custom root element"},{"depth":2,"value":"Usage with Next Link"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"TypeScript"}],"frontmatter":{"title":"Card","package":"@mantine/core","slug":"/core/card/","props":["Card"],"import":"import { Card } from '@mantine/core';","docs":"core/Card.mdx","source":"mantine-core/src/components/Card/Card.tsx","description":"Card with context styles for Image and Divider components","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["Card","single-node"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"Card\",\n  \"order\": 1,\n  \"slug\": \"/core/card/\",\n  \"category\": \"data-display\",\n  \"description\": \"Card with context styles for Image and Divider components\",\n  \"props\": [\"Card\"],\n  \"import\": \"import { Card } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/Card/Card.tsx\",\n  \"docs\": \"core/Card.mdx\",\n  \"styles\": [\"Card\", \"single-node\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Card component is a wrapper around \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/paper/\"\n  }, \"Paper\"), \" component\\nwith context styles for Card.Section component.\\nCombine Card component with other Mantine components to create cards with your design requirements:\"), mdx(Demo, {\n    data: CardDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"cardsection\"\n  }, \"Card.Section\"), mdx(\"p\", null, \"Card.Section is a special component that is used to remove Card padding from its children while other elements still have horizontal spacing.\\nCard.Section works the following way:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"It component is a first child in Card then it has negative top, left and right margins\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If it is a last child in Card then it has negative bottom, left and right margins\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If it is in the middle then only left and right margins will be negative\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Card padding=\\\"xl\\\">\\n  {/* top, right, left margins are negative \\u2013 -1 * theme.spacing.xl */}\\n  <Card.Section>First section</Card.Section>\\n\\n  {/* Content that is not inside Card.Section will have theme.spacing.xl spacing on all sides relative to Card */}\\n  <Text>Some other content</Text>\\n\\n  {/* right, left margins are negative \\u2013 -1 * theme.spacing.xl */}\\n  <Card.Section>Middle section</Card.Section>\\n\\n  {/* bottom, right, left margins are negative \\u2013 -1 * theme.spacing.xl */}\\n  <Card.Section>Last section</Card.Section>\\n</Card>\\n\")), mdx(\"p\", null, \"Note that Card relies on mapping direct children and you cannot use fragments or others wrappers for Card.Section:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Card padding=\\\"xl\\\">\\n  <div>\\n    <Card.Section>Won't work</Card.Section>\\n  </div>\\n\\n  <>\\n    <Card.Section>Won't work either</Card.Section>\\n  </>\\n\\n  <Card.Section>Works fine</Card.Section>\\n</Card>\\n\")), mdx(\"h2\", {\n    \"id\": \"custom-root-element\"\n  }, \"Custom root element\"), mdx(\"p\", null, \"You can set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"component\"), \" prop on Card to use provide custom root element,\\nfor example, you can make whole card a link:\"), mdx(Demo, {\n    data: CardDemos.link,\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"You can also use React component instead of an element, for example, Link from react-router-dom:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { Link } from 'react-router-dom';\\nimport { Card } from '@mantine/core';\\n\\nfunction Demo() {\\n  return <Card component={Link} to=\\\"/my-route/\\\" />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"usage-with-next-link\"\n  }, \"Usage with Next Link\"), mdx(\"p\", null, \"Next Link component requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ref\"), \" prop usage, however all Mantine components use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \",\\nto make Card and other similar components work with Next Link, create wrapper component in your components folder:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// This component can be reused in every Mantine component which supports component pass through\\nimport React, { forwardRef } from 'react';\\nimport Link from 'next/link';\\n\\nexport const NextLink = forwardRef(\\n  (\\n    { href, ...others }: React.ComponentPropsWithoutRef<typeof Link>,\\n    ref: React.ForwardedRef<HTMLAnchorElement>\\n  ) => (\\n    <Link href={href}>\\n      {/* eslint-disable-next-line jsx-a11y/anchor-has-content */}\\n      <a {...others} ref={ref} />\\n    </Link>\\n  )\\n);\\n\")), mdx(\"p\", null, \"And then pass it to Card or other component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Card component={NextLink} href=\\\"/hello\\\" />\\n\")), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get root element ref by setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useRef } from 'react';\\nimport { Card } from '@mantine/core';\\n\\nfunction Demo() {\\n  const ref = useRef();\\n  return <Card elementRef={ref} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"typescript\"\n  }, \"TypeScript\"), mdx(\"p\", null, \"You need to pass additional types to use custom component with TypeScript\\nin case you need full type coverage for events and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// With element\\n<Card<'a', HTMLAnchorElement>\\n  component=\\\"a\\\"\\n  onClick={(event) => console.log(event)}\\n  elementRef={(node) => {\\n    window.myRef = node;\\n  }}\\n/>\\n\\n// With component\\n<Card<typeof Link, HTMLAnchorElement>\\n  component={Link}\\n  onClick={(event) => console.log(event)}\\n  elementRef={(node) => {\\n    window.myRef = node;\\n  }}\\n/>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"bdcf200d-dbcd-53bf-bf4c-ba965193b06a","slug":"core/Card","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}