{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/segmented-control/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Controlled"},{"depth":2,"value":"Data prop"},{"depth":2,"value":"Full width"},{"depth":2,"value":"Sizes"},{"depth":2,"value":"Radius"},{"depth":2,"value":"Color"},{"depth":2,"value":"Transitions"},{"depth":2,"value":"Server side rendering"},{"depth":2,"value":"Resize observer"},{"depth":2,"value":"Accessibility and usability"}],"frontmatter":{"title":"SegmentedControl","package":"@mantine/core","slug":"/core/segmented-control/","props":["SegmentedControl"],"import":"import { SegmentedControl } from '@mantine/core';","docs":"core/SegmentedControl.mdx","source":"mantine-core/src/components/SegmentedControl/SegmentedControl.tsx","description":"Horizontal control made of multiple segments, alternative to RadioGroup","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["SegmentedControl"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"SegmentedControl\",\n  \"order\": 1,\n  \"slug\": \"/core/segmented-control/\",\n  \"category\": \"inputs\",\n  \"description\": \"Horizontal control made of multiple segments, alternative to RadioGroup\",\n  \"props\": [\"SegmentedControl\"],\n  \"import\": \"import { SegmentedControl } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/SegmentedControl/SegmentedControl.tsx\",\n  \"docs\": \"core/SegmentedControl.mdx\",\n  \"styles\": [\"SegmentedControl\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"SegmentedControl is usually used as an alternative to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/core/tabs/\"\n  }, \"Tabs\"), \" to switch views\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/core/radio-group/\"\n  }, \"RadioGroup\"), \" to capture user feedback limited to certain\\noptions\")), mdx(Demo, {\n    data: SegmentedControlDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { SegmentedControl } from '@mantine/core';\\n\\nfunction Demo() {\\n  const [value, setValue] = useState('react');\\n  return (\\n    <SegmentedControl\\n      value={value}\\n      onChange={setValue}\\n      data={[\\n        { label: 'React', value: 'react' },\\n        { label: 'Angular', value: 'ng' },\\n        { label: 'Vue', value: 'vue' },\\n        { label: 'Svelte', value: 'svelte' },\\n      ]}\\n    />\\n  );\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"data-prop\"\n  }, \"Data prop\"), mdx(\"p\", null, \"SegmentedControl support two different data formats:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"An array of strings \\u2013 use when you do not need to customize item component or display \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"label\"), \" different than \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"An array of objects with required \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"label\"), \" properties and any other additional properties\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Data as an array of strings, will be mapped to\\n// [\\n//  { value: 'React', label: 'React' },\\n//  { value: 'Angular', label: 'Angular' },\\n//  { value: 'Svelte', label: 'Svelte' },\\n//  { value: 'Vue', label: 'Vue' },\\n// ]\\n<SegmentedControl data={['React', 'Angular', 'Svelte', 'Vue']} />\\n\\n// Data as an array of objects:\\n<SegmentedControl data={[\\n  { value: 'React', label: 'React' },\\n  { value: 'Angular', label: 'Angular' },\\n  { value: 'Svelte', label: 'Svelte' },\\n  { value: 'Vue', label: 'Vue' },\\n]} />\\n\")), mdx(\"h2\", {\n    \"id\": \"full-width\"\n  }, \"Full width\"), mdx(\"p\", null, \"By default SegmentedControl is inline and will take only the amount of space which is required to render elements.\\nSet \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fullWidth\"), \" prop to make it block and take 100% width of its container:\"), mdx(Demo, {\n    data: SegmentedControlDemos.fullWidth,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"sizes\"\n  }, \"Sizes\"), mdx(\"p\", null, \"Component supports 5 sizes: xs, sm, md, lg, xl.\\nSize controls font-size and padding properties.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<SegmentedControl size=\\\"sm\\\" />\\n\")), mdx(\"p\", null, \"SegmentedControl sizes from xs to xl:\"), mdx(Demo, {\n    data: SegmentedControlDemos.sizes,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"radius\"\n  }, \"Radius\"), mdx(\"p\", null, \"xs, sm, md, lg, xl radius values are defined in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/theming/extend-theme/#spacing-radius-and-shadows\"\n  }, \"theme.radius\"), \".\\nAlternatively, you can use a number to set radius in px:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<SegmentedControl radius=\\\"lg\\\" /> // -> theme predefined large radius\\n<SegmentedControl radius={20} /> // -> { borderRadius: '20px' }\\n<SegmentedControl radius={0} /> // -> { borderRadius: 0 }\\n\")), mdx(\"p\", null, \"Default theme radius values from xs to xl with lg size:\"), mdx(Demo, {\n    data: SegmentedControlDemos.radius,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"color\"\n  }, \"Color\"), mdx(\"p\", null, \"By default segmented control uses \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.white\"), \" with shadow in light color scheme and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.colors.dark[6]\"), \" background color for active element.\\nYou can choose any color defined in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/theming/extend-theme/#default-colors\"\n  }, \"theme.colors\"), \" in case you need colored variant:\"), mdx(Demo, {\n    data: SegmentedControlDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"transitions\"\n  }, \"Transitions\"), mdx(\"p\", null, \"Change transition properties with:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"transitionDuration\"), \" \\u2013 all transitions duration in ms (ignored if user prefers to reduce motion)\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"transitionTimingFunction\"), \" \\u2013 defaults to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"theme.transitionTimingFunction\"))), mdx(Demo, {\n    data: SegmentedControlDemos.transitions,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"server-side-rendering\"\n  }, \"Server side rendering\"), mdx(\"p\", null, \"Component uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-id/\"\n  }, \"use-id\"), \" hook\\nto generate random id which is used to bind inputs to labels.\\nIf you want to avoid id mismatch during hydration provide static name value:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// -> oh-oh, id on elements is mismatched, won't break anything, but shows nasty error\\n<SegmentedControl />\\n\\n// -> ok, inputs ids are static and will match during hydration\\n<SegmentedControl name=\\\"my-control\\\" />\\n\")), mdx(\"h2\", {\n    \"id\": \"resize-observer\"\n  }, \"Resize observer\"), mdx(\"p\", null, \"SegmentedControl uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://developer.mozilla.org/en-US/docs/Web/API/ResizeObserver\"\n  }, \"ResizeObserver\"), \"\\nto calculate active control background position. Position changes on container width change with 50ms debounce to avoid performance issue.\"), mdx(\"p\", null, \"ResizeObserver is \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://caniuse.com/resizeobserver\"\n  }, \"supported by all modern browsers\"), \",\\nif you encounter any errors with browser compatibility use \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://www.npmjs.com/package/resize-observer-polyfill\"\n  }, \"polyfill\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import ResizeObserver from 'resize-observer-polyfill';\\nwindow.ResizeObserver = ResizeObserver;\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility-and-usability\"\n  }, \"Accessibility and usability\"), mdx(\"p\", null, \"SegmentedControl uses radio inputs under the hood, it is accessible by default with no extra steps required.\\nComponent support the same keyboard events as regular radio group.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"e97626e7-89b3-58b2-815d-4e460fa3415d","slug":"core/SegmentedControl","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}