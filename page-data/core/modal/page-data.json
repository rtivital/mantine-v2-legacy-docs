{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/modal/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Remove title and close button"},{"depth":2,"value":"Change size"},{"depth":2,"value":"Customize overlay"},{"depth":2,"value":"Modal with overflow"},{"depth":2,"value":"Change transitions"},{"depth":2,"value":"Initial focus"},{"depth":2,"value":"Accessibility and usability"}],"frontmatter":{"title":"Modal","package":"@mantine/core","slug":"/core/modal/","props":["Modal"],"import":"import { Modal } from '@mantine/core';","docs":"core/Modal.mdx","source":"mantine-core/src/components/Modal/Modal.tsx","description":"Modal with optional header","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["Modal"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"Modal\",\n  \"order\": 1,\n  \"slug\": \"/core/modal/\",\n  \"category\": \"overlay\",\n  \"description\": \"Modal with optional header\",\n  \"props\": [\"Modal\"],\n  \"import\": \"import { Modal } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/Modal/Modal.tsx\",\n  \"docs\": \"core/Modal.mdx\",\n  \"styles\": [\"Modal\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar DataTable = makeShortcode(\"DataTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Modal is wrapped in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/portal/\"\n  }, \"Portal\"), \" component,\\nit can be rendered only on client as createPortal is not available during server side rendering:\"), mdx(Demo, {\n    data: ModalDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"remove-title-and-close-button\"\n  }, \"Remove title and close button\"), mdx(\"p\", null, \"You can remove modal title and close button.\\nIt will still be possible to close modal by clicking on overlay or pressing escape.\"), mdx(Demo, {\n    data: ModalDemos.header,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"change-size\"\n  }, \"Change size\"), mdx(\"p\", null, \"You can change modal width by setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" prop to predefined size or any valid width, for example, 55% or 200px.\\nSize controls modal width, max-width is set to 100% with spacing on left and right, no matter what \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" is passed 100% will not be exceed\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Modal size=\\\"sm\\\" /> // -> predefined small size\\n<Modal size={378} /> // -> size in px\\n<Modal size=\\\"55%\\\" /> // -> size in %\\n<Modal size=\\\"calc(100vw - 87px)\\\" /> // -> size with calc\\n<Modal size=\\\"255%\\\" /> // -> max-width is set to 100%, won't work\\n\")), mdx(Demo, {\n    data: ModalDemos.sizes,\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"Modal has 6 predefined sizes: xs, sm, md (default), lg, xl and full.\\nYou can get these values by importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"MODAL_SIZES\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { MODAL_SIZES } from '@mantine/core';\\n\")), mdx(DataTable, {\n    head: ['Prop value', 'Modal width'],\n    data: Object.keys(MODAL_SIZES).map(function (size) {\n      return [size, \"\".concat(MODAL_SIZES[size]).concat(typeof size === 'number' ? 'px' : '')];\n    }),\n    mdxType: \"DataTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"customize-overlay\"\n  }, \"Customize overlay\"), mdx(\"p\", null, \"Modal uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/overlay/\"\n  }, \"Overlay\"), \" component to render overlay, you can change overlay opacity and color:\"), mdx(Demo, {\n    data: ModalDemos.overlay,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"modal-with-overflow\"\n  }, \"Modal with overflow\"), mdx(\"p\", null, \"You can control modal vertical overflow behavior by setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"overflow\"), \" prop:\"), mdx(Demo, {\n    data: ModalDemos.overflow,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"change-transitions\"\n  }, \"Change transitions\"), mdx(\"p\", null, \"Modal is built with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/transition/\"\n  }, \"Transition\"), \" component.\"), mdx(\"p\", null, \"You can change transitions with props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"transition\"), \" \\u2013 predefined transition name or transition object\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"transitionDuration\"), \" \\u2013 transition duration in ms, defaults to 300ms. Note that, modal has two elements which are animated: overlay and modal body. Overlay changes opacity during transition and its animation is twice as fast as modal body.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"strong\", {\n    parentName: \"li\"\n  }, \"transitionTimingFunction\"), \" \\u2013 timing function, defaults to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"theme.transitionTimingFunction\"))), mdx(Demo, {\n    data: ModalDemos.transitions,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"initial-focus\"\n  }, \"Initial focus\"), mdx(\"p\", null, \"Modal uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-focus-trap/\"\n  }, \"use-focus-trap\"), \" to manage focus.\\nTo specify initial focus element add \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data-autofocus\"), \" attribute:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Modal>\\n  <input />\\n  {/* Second input in modal will have initial focus */}\\n  <input data-autofocus />\\n  <input />\\n</Modal>\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility-and-usability\"\n  }, \"Accessibility and usability\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When modal is opened focus is trapped inside and vertical scroll is locked at current position\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"When user clicks on overlay or presses escape modal closes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Modal transitions are disabled if user prefers to reduce motion\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Modal wrapper has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-modal=\\\"true\\\"\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"role=\\\"dialog\\\"\"), \" attributes\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Modal wrapper has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-labelledby\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-describedby\"), \" pointing to modal title and body\")), mdx(\"p\", null, \"For better screen reader support set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"closeButtonLabel\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// sets title attribute on close button\\n<Modal closeButtonLabel=\\\"Close authentication modal\\\" />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"32cc1c95-cfb8-5543-8c83-6282a08dd01b","slug":"core/Modal","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}