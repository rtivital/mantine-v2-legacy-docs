{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/accordion/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Components"},{"depth":2,"value":"Usage"},{"depth":2,"value":"Change labels"},{"depth":2,"value":"Styles API"},{"depth":2,"value":"Multiple opened items"},{"depth":2,"value":"Component state"},{"depth":2,"value":"Server side rendering"}],"frontmatter":{"title":"Accordion","package":"@mantine/core","slug":"/core/accordion/","props":["Accordion"],"import":"import { Accordion } from '@mantine/core';","docs":"core/Accordion.mdx","source":"mantine-core/src/components/Accordion/Accordion.tsx","description":"Divide content into collapsible sections","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["Accordion"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"Accordion\",\n  \"order\": 1,\n  \"slug\": \"/core/accordion/\",\n  \"category\": \"data-display\",\n  \"description\": \"Divide content into collapsible sections\",\n  \"props\": [\"Accordion\"],\n  \"import\": \"import { Accordion } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/Accordion/Accordion.tsx\",\n  \"docs\": \"core/Accordion.mdx\",\n  \"styles\": [\"Accordion\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"components\"\n  }, \"Components\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Accordion.Item\"), \" \\u2013 utility component to pass data to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Accordion\"), \" component, does not render anything on its own. Do not use outside of \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Accordion\"), \" component.\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"Accordion\"), \" \\u2013 receives data from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"AccordionItem\"), \" content and renders component\")), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(Demo, {\n    data: AccordionDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"change-labels\"\n  }, \"Change labels\"), mdx(\"p\", null, \"You can use any react component as label:\"), mdx(Demo, {\n    data: AccordionDemos.label,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"styles-api\"\n  }, \"Styles API\"), mdx(\"p\", null, \"Default Accordion has bare minimum styles to make customization more simple,\\nyou can add any additional styles with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/theming/styles-api/\"\n  }, \"Styles API\"), \":\"), mdx(Demo, {\n    data: AccordionDemos.stylesApi,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"multiple-opened-items\"\n  }, \"Multiple opened items\"), mdx(\"p\", null, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"multiple\"), \" prop on Accordion component to allow any amount of items to be opened at the same time:\"), mdx(Demo, {\n    data: AccordionDemos.multiple,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"component-state\"\n  }, \"Component state\"), mdx(\"p\", null, \"In most cases you would use uncontrolled Accordion, to change initial opened item use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"initialItem\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// -> Third element will be opened initially\\n<Accordion initialItem={2} />;\\n\\n// -> No element will be opened initially\\n<Accordion initialItem={-1} />;\\n\")), mdx(\"p\", null, \"If you need to manage component state on your own provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"state\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onChange\"), \" props:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { Accordion } from '@mantine/core';\\n\\nfunction Demo() {\\n  // Second item will be initially opened\\n  const [state, onChange] = useState({ 0: false, 1: true, 2: false });\\n  return <Accordion state={state} onChange={onChange} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"server-side-rendering\"\n  }, \"Server side rendering\"), mdx(\"p\", null, \"Component uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-id/\"\n  }, \"use-id\"), \" hook to generate unique ids and aria- attributes,\\nprovide static \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" prop to prevent props mismatch:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Accordion /> // -> random id generated both on client and server, props mismatch warning\\n<Accordion id=\\\"my-accordion\\\" /> // -> id is static, no mismatches\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"67ce0669-6a32-5e56-bf96-4021296ca920","slug":"core/Accordion","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}