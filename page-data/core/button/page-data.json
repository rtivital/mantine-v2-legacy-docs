{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/button/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Variants"},{"depth":3,"value":"Gradient variant"},{"depth":3,"value":"White variant"},{"depth":2,"value":"Loading state"},{"depth":2,"value":"Customize"},{"depth":2,"value":"Compact"},{"depth":2,"value":"Size and radius"},{"depth":2,"value":"Full width and overflow"},{"depth":2,"value":"Change root element"},{"depth":2,"value":"Usage with react-router and other libraries"},{"depth":2,"value":"Usage with Next Link"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"Unstyled button"},{"depth":2,"value":"TypeScript"}],"frontmatter":{"title":"Button","package":"@mantine/core","slug":"/core/button/","props":["Button"],"import":"import { Button } from '@mantine/core';","docs":"core/Button.mdx","source":"mantine-core/src/components/Button/Button.tsx","description":"Render button or link with button styles from mantine theme","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["Button"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"Button\",\n  \"order\": 1,\n  \"slug\": \"/core/button/\",\n  \"category\": \"inputs\",\n  \"description\": \"Render button or link with button styles from mantine theme\",\n  \"props\": [\"Button\"],\n  \"import\": \"import { Button } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/Button/Button.tsx\",\n  \"docs\": \"core/Button.mdx\",\n  \"styles\": [\"Button\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar DataTable = makeShortcode(\"DataTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(Demo, {\n    data: ButtonDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"variants\"\n  }, \"Variants\"), mdx(\"p\", null, \"Button has 6 variants: white, gradient, filled, light, outline and link:\"), mdx(Demo, {\n    data: ButtonDemos.variants,\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"Default Button color is \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.primaryColor\"), \", to change color and variant pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"variant\"), \" props:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Button color=\\\"red\\\" /> // filled button with red color\\n<Button variant=\\\"outline\\\" /> // outline button with theme.primaryColor color\\n<Button variant=\\\"link\\\" color=\\\"indigo\\\" /> // indigo link button\\n\")), mdx(\"h3\", {\n    \"id\": \"gradient-variant\"\n  }, \"Gradient variant\"), mdx(\"p\", null, \"To use gradient as Button background:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"variant\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gradient\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"set \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"gradient\"), \" to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"{ from: 'color-from', to: 'color-to', deg: 135 }\"), \", where\", mdx(\"ul\", {\n    parentName: \"li\"\n  }, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"color-from\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"color-to\"), \" are color from \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"theme.colors\")), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"deg\"), \" is linear gradient deg\")))), mdx(Demo, {\n    data: ButtonDemos.gradient,\n    mdxType: \"Demo\"\n  }), mdx(\"h3\", {\n    \"id\": \"white-variant\"\n  }, \"White variant\"), mdx(\"p\", null, \"White is a variant in which button background color is always white (both in light and dark theme) and color is controlled with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" prop:\"), mdx(Demo, {\n    data: ButtonDemos.whiteConfigurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"loading-state\"\n  }, \"Loading state\"), mdx(\"p\", null, \"Button supports loading state. In this state \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/loader/\"\n  }, \"Loader\"), \" component replaces left or right icon,\\nbutton becomes disabled and white or dark overlay is added.\"), mdx(\"p\", null, \"You can control loading state and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/loader/\"\n  }, \"Loader\"), \" component with following props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"loading\"), \" \\u2013 enable loading state\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"loaderPosition\"), \" \\u2013 Loader position relative to button label, either right or left\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"loaderProps\"), \" \\u2013 props spread to Loader component, you can choose loader type, size and any other \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/core/loader/\"\n  }, \"supported\"), \" prop\")), mdx(Demo, {\n    data: ButtonDemos.loadingConfigurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"customize\"\n  }, \"Customize\"), mdx(\"p\", null, \"You can change styles of any element in button component with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/theming/styles-api/\"\n  }, \"Styles API\"), \" to match your design requirements:\"), mdx(Demo, {\n    data: ButtonDemos.customize,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"compact\"\n  }, \"Compact\"), mdx(\"p\", null, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"compact\"), \" prop to reduce button height and horizontal padding:\"), mdx(Demo, {\n    data: ButtonDemos.compact,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"size-and-radius\"\n  }, \"Size and radius\"), mdx(\"p\", null, \"Control button font-size, height and padding with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"size\"), \" and border-radius with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"radius\"), \" props.\\nBoth props have predefined values: xs, sm, md, lg, xl.\\nAlternatively, you can use a number to set radius in px:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Button radius=\\\"lg\\\" /> // -> theme predefined large radius\\n<Button radius={10} /> // -> { borderRadius: '10px' }\\n<Button size=\\\"sm\\\" /> // -> predefined small size\\n\")), mdx(Demo, {\n    data: ButtonDemos.sizes,\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"You can get predefined button heights by importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"BUTTON_SIZES\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { BUTTON_SIZES } from '@mantine/core';\\n\")), mdx(DataTable, {\n    head: ['Size', 'Button height'],\n    data: Object.keys(BUTTON_SIZES).map(function (size) {\n      return [size, \"\".concat(BUTTON_SIZES[size], \"px\")];\n    }),\n    mdxType: \"DataTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"full-width-and-overflow\"\n  }, \"Full width and overflow\"), mdx(\"p\", null, \"Button can take full width of container if you pass \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"fullWidth\"), \" prop.\\nIf button is too large for its container, overflow content will be hidden:\"), mdx(Demo, {\n    data: ButtonDemos.overflow,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"change-root-element\"\n  }, \"Change root element\"), mdx(\"p\", null, \"You can use Button component both as \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"button\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"a\"), \" elements:\"), mdx(Demo, {\n    data: ButtonDemos.component,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage-with-react-router-and-other-libraries\"\n  }, \"Usage with react-router and other libraries\"), mdx(\"p\", null, \"You can use Button component with \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactrouter.com/web/guides/quick-start\"\n  }, \"react-router-dom\"), \"\\nor other similar libraries by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"Link\"), \" as component to Button:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { Link } from 'react-router-dom';\\nimport { Button } from '@mantine/core';\\n\\nfunction Demo() {\\n  return (\\n    <Button component={Link} to=\\\"/react-router\\\">\\n      React router link\\n    </Button>\\n  );\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"usage-with-next-link\"\n  }, \"Usage with Next Link\"), mdx(\"p\", null, \"Next Link component requires \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"ref\"), \" prop usage, however all Mantine components use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \",\\nto make Button and other similar components work with Next Link, create wrapper component in your components folder:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// This component can be reused in every Mantine component which supports component pass through\\nimport React, { forwardRef } from 'react';\\nimport Link from 'next/link';\\n\\nexport const NextLink = forwardRef(\\n  (\\n    { href, ...others }: React.ComponentPropsWithoutRef<typeof Link>,\\n    ref: React.ForwardedRef<HTMLAnchorElement>\\n  ) => (\\n    <Link href={href}>\\n      {/* eslint-disable-next-line jsx-a11y/anchor-has-content */}\\n      <a {...others} ref={ref} />\\n    </Link>\\n  )\\n);\\n\")), mdx(\"p\", null, \"And then pass it to Button or other component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Button component={NextLink} href=\\\"/hello\\\">\\n  Next Link button\\n</Button>\\n\")), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get root element ref with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useRef } from 'react';\\nimport { Button } from '@mantine/core';\\n\\nfunction Demo() {\\n  const ref = useRef();\\n  return <Button elementRef={ref} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"unstyled-button\"\n  }, \"Unstyled button\"), mdx(\"p\", null, \"To create custom buttons not related to Button component, use UnstyledButton component,\\nit renders regular button without default browser styles and with Mantine focus styles:\"), mdx(Demo, {\n    data: ButtonDemos.unstyled,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"typescript\"\n  }, \"TypeScript\"), mdx(\"p\", null, \"You need to pass additional types to use custom component with TypeScript\\nin case you need full type coverage for events and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// With element\\n<Button<'button', HTMLButtonElement>\\n  component=\\\"button\\\"\\n  onClick={(event) => console.log(event)}\\n  elementRef={(node) => {\\n    window.myRef = node;\\n  }}\\n/>\\n\\n// With component\\n<Button<typeof Link, HTMLAnchorElement>\\n  component={Link}\\n  onClick={(event) => console.log(event)}\\n  elementRef={(node) => {\\n    window.myRef = node;\\n  }}\\n/>\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"56883887-f75a-53e0-bd6e-372a379e4068","slug":"core/Button","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}