{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/native-select/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Controlled"},{"depth":2,"value":"Invalid state and error"},{"depth":2,"value":"Disabled state"},{"depth":2,"value":"With icon"},{"depth":2,"value":"Right section"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"Server side rendering"},{"depth":2,"value":"Accessibility"}],"frontmatter":{"title":"NativeSelect","package":"@mantine/core","slug":"/core/native-select/","props":["NativeSelect"],"import":"import { NativeSelect } from '@mantine/core';","docs":"core/NativeSelect.mdx","source":"mantine-core/src/components/NativeSelect/NativeSelect.tsx","description":"Capture user feedback limited to large set of options","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["NativeSelect"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"NativeSelect\",\n  \"order\": 1,\n  \"slug\": \"/core/native-select/\",\n  \"category\": \"inputs\",\n  \"description\": \"Capture user feedback limited to large set of options\",\n  \"props\": [\"NativeSelect\"],\n  \"import\": \"import { NativeSelect } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/NativeSelect/NativeSelect.tsx\",\n  \"docs\": \"core/NativeSelect.mdx\",\n  \"styles\": [\"NativeSelect\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Use select when you need to capture user feedback limited to certain options.\\nIf you only have 2-5 options consider using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/radio-group/\"\n  }, \"RadioGroup\"), \" instead of select,\\nas it provides better UX for smaller data sets.\"), mdx(\"p\", null, \"Component supports all props from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/input/\"\n  }, \"Input\"), \" (except for \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rightSection\"), \") and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/input-wrapper/\"\n  }, \"InputWrapper\"), \" components.\"), mdx(Demo, {\n    data: NativeSelectDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { NativeSelect } from '@mantine/core';\\n\\nfunction Demo() {\\n  const [value, setValue] = useState('');\\n  return <NativeSelect value={value} onChange={(event) => setValue(event.currentTarget.value)} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"invalid-state-and-error\"\n  }, \"Invalid state and error\"), mdx(Demo, {\n    data: NativeSelectDemos.validation,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"disabled-state\"\n  }, \"Disabled state\"), mdx(Demo, {\n    data: NativeSelectDemos.disabled,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"with-icon\"\n  }, \"With icon\"), mdx(\"p\", null, \"You can use any React node as icon:\"), mdx(Demo, {\n    data: NativeSelectDemos.icon,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"right-section\"\n  }, \"Right section\"), mdx(\"p\", null, \"You can replace icon in right section with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rightSection\"), \" prop.\\nNote that in this case \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearable\"), \" option will not work and will need to handle it yourself:\"), mdx(Demo, {\n    data: NativeSelectDemos.rightSection,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get input ref by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop to NativeSelect component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useRef } from 'react';\\nimport { NativeSelect } from '@mantine/core';\\n\\nfunction Demo() {\\n  const ref = useRef(null);\\n  return <NativeSelect elementRef={ref} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"server-side-rendering\"\n  }, \"Server side rendering\"), mdx(\"p\", null, \"Component uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-id/\"\n  }, \"use-id\"), \" hook to generate unique ids and aria- attributes,\\nprovide static \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" prop to prevent props mismatch:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<NativeSelect /> // -> random id generated both on client and server, props mismatch warning\\n<NativeSelect id=\\\"my-select\\\" /> // -> id is static, no mismatches\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, \"Provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label\"), \" in case you use component without label for screen reader support:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<NativeSelect label=\\\"My select\\\" />; // -> ok, select and label is connected\\n<NativeSelect />; // not ok, select is not labeled\\n<NativeSelect aria-label=\\\"My select\\\" />; // -> ok, label is not visible but will be announced by screen reader\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"49974646-7484-5bdf-8711-b210179c575f","slug":"core/NativeSelect","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}