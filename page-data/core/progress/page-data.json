{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/progress/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Multiple sections"},{"depth":2,"value":"Example"},{"depth":2,"value":"Size"},{"depth":2,"value":"Radius"},{"depth":2,"value":"Accessibility"}],"frontmatter":{"title":"Progress","package":"@mantine/core","slug":"/core/progress/","props":["Progress"],"import":"import { Progress } from '@mantine/core';","docs":"core/Progress.mdx","source":"mantine-core/src/components/Progress/Progress.tsx","description":"Give user feedback for status of the task","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["Progress"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"Progress\",\n  \"order\": 1,\n  \"slug\": \"/core/progress/\",\n  \"category\": \"feedback\",\n  \"description\": \"Give user feedback for status of the task\",\n  \"props\": [\"Progress\"],\n  \"import\": \"import { Progress } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/Progress/Progress.tsx\",\n  \"docs\": \"core/Progress.mdx\",\n  \"styles\": [\"Progress\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar DataTable = makeShortcode(\"DataTable\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Use Progress to display progress of action that takes long time or includes multiple steps.\"), mdx(\"p\", null, \"Progress component has one required prop \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" \\u2013 filled bar width in %.\\nYou can change bar color by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"color\"), \" prop, by default \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.primaryColor\"), \" will be used.\\nIf you set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"striped\"), \" prop to true bar will have stipes.\"), mdx(Demo, {\n    data: ProgressDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"multiple-sections\"\n  }, \"Multiple sections\"), mdx(\"p\", null, \"You can display multiple sections instead of single progress bar. Note that in this case \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"value\"), \" prop will be ignored:\"), mdx(Demo, {\n    data: ProgressDemos.sections,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"example\"\n  }, \"Example\"), mdx(\"p\", null, \"Password strength meter example with Progress component:\"), mdx(Demo, {\n    data: PasswordInputDemos.strengthMeter,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"size\"\n  }, \"Size\"), mdx(\"p\", null, \"Size controls progress bar height. Progress has predefined sizes: xs, sm, md, lg, xl.\\nAlternatively, you can use a number to set height in px:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Progress size=\\\"sm\\\" /> // -> predefined small size\\n<Progress size={50} /> // -> { height: 50 }\\n\")), mdx(\"p\", null, \"You can get default sizes by importing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"PROGRESS_SIZES\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { PROGRESS_SIZES } from '@mantine/core';\\n\")), mdx(DataTable, {\n    head: ['Size', 'Height'],\n    data: Object.keys(PROGRESS_SIZES).map(function (size) {\n      return [size, \"\".concat(PROGRESS_SIZES[size], \"px\")];\n    }),\n    mdxType: \"DataTable\"\n  }), mdx(\"h2\", {\n    \"id\": \"radius\"\n  }, \"Radius\"), mdx(\"p\", null, \"Radius controls border-radius of body and filled part.\\nxs, sm, md, lg, xl radius values are defined in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/theming/extend-theme/#spacing-radius-and-shadows\"\n  }, \"theme.radius\"), \".\\nAlternatively, you can use a number to set radius in px:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Progress radius=\\\"lg\\\" /> // -> theme predefined large radius\\n<Progress radius={10} /> // -> { borderRadius: 10 }\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Progress bar element has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"role=\\\"progressbar\\\"\"), \" attribute\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Progress bar element has \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-valuenow\"), \" attribute with current value\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-valuemin\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"aria-valuemax\"), \" attributes are always set to 0 and 100 as component does not support other values\")), mdx(\"p\", null, \"Provide aria-label attribute to label progress:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<Progress aria-label=\\\"Uploading progress\\\" value={10} />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"f0b2d02a-7fc1-52e5-b9ee-3b1b2e88abd4","slug":"core/Progress","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}