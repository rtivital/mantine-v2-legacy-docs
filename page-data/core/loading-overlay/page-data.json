{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/loading-overlay/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Transition duration"},{"depth":2,"value":"Loader and Overlay props"},{"depth":2,"value":"Configure default loader"},{"depth":2,"value":"Custom loader"}],"frontmatter":{"title":"LoadingOverlay","package":"@mantine/core","slug":"/core/loading-overlay/","props":["LoadingOverlay"],"import":"import { LoadingOverlay } from '@mantine/core';","docs":"core/LoadingOverlay.mdx","source":"mantine-core/src/components/LoadingOverlay/LoadingOverlay.tsx","description":"Overlay over given container with centered Loader","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["LoadingOverlay","single-node"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"LoadingOverlay\",\n  \"order\": 1,\n  \"slug\": \"/core/loading-overlay/\",\n  \"category\": \"overlay\",\n  \"description\": \"Overlay over given container with centered Loader\",\n  \"props\": [\"LoadingOverlay\"],\n  \"import\": \"import { LoadingOverlay } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/LoadingOverlay/LoadingOverlay.tsx\",\n  \"docs\": \"core/LoadingOverlay.mdx\",\n  \"styles\": [\"LoadingOverlay\", \"single-node\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Use LoadingOverlay to overlay element to disable interactions and indicate loading state.\\nNote that elements under overlay are still focusable with keyboard. Remember to add additional logic to handle this case.\"), mdx(\"p\", null, \"Overlay had absolute position and will take 100% of width and height of nearest parent container with relative position.\\nUse it when you need to disable user interactions and indicate loading state, for example, while form is submitting.\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"visible\"), \" is the only required prop, if it set to false component will not render anything.\"), mdx(Demo, {\n    data: LoadingOverlayDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"transition-duration\"\n  }, \"Transition duration\"), mdx(\"p\", null, \"You can change appear and disappear animations duration by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"transitionDuration\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// 500ms animations\\n<LoadingOverlay transitionDuration={500} />\\n\\n// disable animations\\n<LoadingOverlay transitionDuration={0} />\\n\")), mdx(\"h2\", {\n    \"id\": \"loader-and-overlay-props\"\n  }, \"Loader and Overlay props\"), mdx(\"p\", null, \"LoadingOverlay is built using \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/overlay/\"\n  }, \"Overlay\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/loader/\"\n  }, \"Loader\"), \" components.\\nYou can change all props of Loader component, opacity and color of Overlay:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<LoadingOverlay\\n  loaderProps={{ size: 'sm', color: 'pink', variant: 'bars' }}\\n  overlayOpacity={0.3}\\n  overlayColor=\\\"#c5c5c5\\\"\\n/>\\n\")), mdx(\"h2\", {\n    \"id\": \"configure-default-loader\"\n  }, \"Configure default loader\"), mdx(\"p\", null, \"You can configure default loader in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/theming/theming-context/\"\n  }, \"MantineProvider\"), \",\\nit will be used in \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/loader/\"\n  }, \"Loader\"), \" and LoadingOverlay components by default:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Loader component will render bars\\n<MantineProvider theme={{ loader: 'bars' }}>\\n  <YourApp />\\n</MantineProvider>\\n\")), mdx(\"h2\", {\n    \"id\": \"custom-loader\"\n  }, \"Custom loader\"), mdx(\"p\", null, \"You can use any other loader with LoadingOverlay by setting \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"loader\"), \" prop:\"), mdx(Demo, {\n    data: LoadingOverlayDemos.loader,\n    mdxType: \"Demo\"\n  }));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"4274baa2-b18f-567c-8bb7-cb50cdd56f52","slug":"core/LoadingOverlay","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}