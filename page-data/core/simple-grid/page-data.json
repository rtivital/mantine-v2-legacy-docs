{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/simple-grid/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Breakpoints"},{"depth":2,"value":"Spacing"},{"depth":2,"value":"Server side rendering"}],"frontmatter":{"title":"SimpleGrid","package":"@mantine/core","slug":"/core/simple-grid/","props":["SimpleGrid"],"import":"import { SimpleGrid } from '@mantine/core';","docs":"core/SimpleGrid.mdx","source":"mantine-core/src/components/SimpleGrid/SimpleGrid.tsx","description":"Responsive grid where each item takes equal amount of space","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["SimpleGrid","single-node"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"SimpleGrid\",\n  \"order\": 1,\n  \"slug\": \"/core/simple-grid/\",\n  \"category\": \"layout\",\n  \"description\": \"Responsive grid where each item takes equal amount of space\",\n  \"props\": [\"SimpleGrid\"],\n  \"import\": \"import { SimpleGrid } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/SimpleGrid/SimpleGrid.tsx\",\n  \"docs\": \"core/SimpleGrid.mdx\",\n  \"styles\": [\"SimpleGrid\", \"single-node\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"SimpleGrid is a simple flexbox container where each child is treated as column.\\nEach column take equal amount of space and unlike \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/grid/\"\n  }, \"Grid\"), \" component you do not control column span,\\ninstead you specify amount of columns per row:\"), mdx(Demo, {\n    data: SimpleGridDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"breakpoints\"\n  }, \"Breakpoints\"), mdx(\"p\", null, \"Provide an array to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"breakpoints\"), \" prop to define responsive behavior:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"maxWidth\"), \" \\u2013 max-width at which media query will work\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cols\"), \" \\u2013 amount of columns per row at given max-width\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"spacing\"), \" \\u2013 optional spacing at given max-width, if not provided spacing from component prop will be used instead\")), mdx(\"p\", null, \"Resize browser to see breakpoints behavior:\"), mdx(Demo, {\n    data: SimpleGridDemos.breakpoints,\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"In this example:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"If screen width is more than 980px then component \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"cols\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"spacing\"), \" is used \\u2013 4 columns, lg spacing\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"screen width < 980px and > 755px \\u2013 cols = 3, spacing = sm\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"screen width < 755px and > 680px \\u2013 cols = 2, spacing = sm\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"screen width < 680px \\u2013 cols = 1, spacing = sm\")), mdx(\"h2\", {\n    \"id\": \"spacing\"\n  }, \"Spacing\"), mdx(\"p\", null, \"You can use either \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"theme.spacing\"), \" value or number value for spacing in px:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// xl spacing from theme.spacing\\n<SimpleGrid spacing=\\\"xl\\\" />;\\n\\n// 12px spacing\\n<SimpleGrid spacing={12} />;\\n\")), mdx(\"p\", null, \"Spacing also works in \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"breakpoints\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// xl spacing from theme.spacing\\n<SimpleGrid breakpoints={[{ maxWidth: 755, cols: 2, spacing: 'xl' }]} />;\\n\\n// 12px spacing\\n<SimpleGrid breakpoints={[{ maxWidth: 755, cols: 2, spacing: 12 }]} />;\\n\")), mdx(\"h2\", {\n    \"id\": \"server-side-rendering\"\n  }, \"Server side rendering\"), mdx(\"p\", null, \"Component uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-id/\"\n  }, \"use-id\"), \" hook to generate unique classes,\\nprovide static \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" prop to prevent props mismatch:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<SimpleGrid /> // -> random id generated both on client and server, props mismatch warning\\n<SimpleGrid id=\\\"my-grid\\\" /> // -> id is static, no mismatches\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"61c1ef41-d0bb-5e98-9d47-5c91c578320e","slug":"core/SimpleGrid","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}