{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/portal/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Specify target dom node"},{"depth":2,"value":"Server side rendering"}],"frontmatter":{"title":"Portal","package":"@mantine/core","slug":"/core/portal/","props":["Portal"],"import":"import { Portal } from '@mantine/core';","docs":"core/Portal.mdx","source":"mantine-core/src/components/Portal/Portal.tsx","description":"Render component outside of current context","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":null,"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"Portal\",\n  \"order\": 1,\n  \"slug\": \"/core/portal/\",\n  \"category\": \"misc\",\n  \"description\": \"Render component outside of current context\",\n  \"props\": [\"Portal\"],\n  \"import\": \"import { Portal } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/Portal/Portal.tsx\",\n  \"docs\": \"core/Portal.mdx\"\n};\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"Portal is wrapper component for \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"https://reactjs.org/docs/portals.html\"\n  }, \"ReactDOM.createPortal\"), \" API.\\nRender any component or element at the end of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"document.body\"), \" or at given element. \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/modal/\"\n  }, \"Modal\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/drawer/\"\n  }, \"Drawer\"), \" components are wrapped in Portal by default.\"), mdx(\"p\", null, \"Use Portal to render component or element at different place (defaults to the end of \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"document.body\"), \").\\nPortal is useful when you want to prevent parent styles from interfering with child,\\nusually all these styles are related to \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"position\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"z-index\"), \" properties\\nand portals are used for components with fixed position, for example, modals.\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { Portal } from '@mantine/core';\\n\\nfunction PortalDemo() {\\n  const [opened, setOpened] = useState(false);\\n\\n  return (\\n    <main style={{ position: 'relative', zIndex: 1 }}>\\n      <Portal zIndex={5}>\\n        <div opened={opened} onClose={() => setOpened(false)}>\\n          Your modal content\\n        </div>\\n      </Portal>\\n\\n      <button onClick={() => setOpened(true)}>Open modal</button>\\n    </main>\\n  );\\n}\\n\")), mdx(\"p\", null, \"In the example above, div element is rendered outside of parent main (before closing body tag),\\nbut still receives \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"opened\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"onClose\"), \" props. Element will not be affected by parent z-index.\"), mdx(\"h2\", {\n    \"id\": \"specify-target-dom-node\"\n  }, \"Specify target dom node\"), mdx(\"p\", null, \"You can specify dom node where portal will be rendered by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"target\"), \" prop:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"const container = document.createElement('div');\\ndocument.body.appendChild(container);\\n\\n<Portal target={container} />;\\n\")), mdx(\"p\", null, \"If you don't specify the target element, new one will be created and appended to the \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"document.body\"), \" for each Portal component.\"), mdx(\"h2\", {\n    \"id\": \"server-side-rendering\"\n  }, \"Server side rendering\"), mdx(\"p\", null, mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"createPortal\"), \" is not supported during server side rendering.\\nAll components inside Portal are rendered only after application was mounted to the dom.\"));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"d0b4972d-ddc6-5c57-b350-d4d82ba9d33e","slug":"core/Portal","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}