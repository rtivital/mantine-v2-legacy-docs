{"componentChunkName":"component---src-pages-mdx-slug-tsx","path":"/core/multi-select/","result":{"data":{"mdx":{"headings":[{"depth":2,"value":"Usage"},{"depth":2,"value":"Controlled"},{"depth":2,"value":"Data prop"},{"depth":2,"value":"Searchable"},{"depth":2,"value":"Clearable"},{"depth":2,"value":"Large data set"},{"depth":2,"value":"Custom item component"},{"depth":2,"value":"Custom label component"},{"depth":2,"value":"Performance"},{"depth":2,"value":"Animations"},{"depth":2,"value":"With icon"},{"depth":2,"value":"Invalid state and error"},{"depth":2,"value":"Disabled state"},{"depth":2,"value":"Right section"},{"depth":2,"value":"Input props"},{"depth":2,"value":"Get element ref"},{"depth":2,"value":"Server side rendering"},{"depth":2,"value":"Accessibility"}],"frontmatter":{"title":"MultiSelect","package":"@mantine/core","slug":"/core/multi-select/","props":["MultiSelect"],"import":"import { MultiSelect } from '@mantine/core';","docs":"core/MultiSelect.mdx","source":"mantine-core/src/components/MultiSelect/MultiSelect.tsx","description":"Custom searchable multi select","bundleSize":null,"installation":null,"pageTitle":null,"license":null,"styles":["MultiSelect"],"release":null,"date":null},"body":"function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nvar _frontmatter = {\n  \"group\": \"mantine-core\",\n  \"package\": \"@mantine/core\",\n  \"title\": \"MultiSelect\",\n  \"order\": 1,\n  \"slug\": \"/core/multi-select/\",\n  \"category\": \"inputs\",\n  \"description\": \"Custom searchable multi select\",\n  \"props\": [\"MultiSelect\"],\n  \"import\": \"import { MultiSelect } from '@mantine/core';\",\n  \"source\": \"mantine-core/src/components/MultiSelect/MultiSelect.tsx\",\n  \"docs\": \"core/MultiSelect.mdx\",\n  \"styles\": [\"MultiSelect\"]\n};\n\nvar makeShortcode = function makeShortcode(name) {\n  return function MDXDefaultShortcode(props) {\n    console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n    return mdx(\"div\", props);\n  };\n};\n\nvar Demo = makeShortcode(\"Demo\");\nvar layoutProps = {\n  _frontmatter: _frontmatter\n};\nvar MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  var components = _ref.components,\n      props = _objectWithoutProperties(_ref, [\"components\"]);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"h2\", {\n    \"id\": \"usage\"\n  }, \"Usage\"), mdx(\"p\", null, \"MultiSelect component allows user to pick any amount of option from the given \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"data\"), \":\"), mdx(Demo, {\n    data: MultiSelectDemos.countries,\n    demoProps: {\n      toggle: true,\n      zIndex: 4\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"p\", null, \"A bare minimum example:\"), mdx(Demo, {\n    data: MultiSelectDemos.usage,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"controlled\"\n  }, \"Controlled\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useState } from 'react';\\nimport { MultiSelect } from '@mantine/core';\\n\\nfunction Demo() {\\n  const [value, setValue] = useState([]);\\n  return <MultiSelect value={value} onChange={setValue} />;\\n}\\n\")), mdx(\"p\", null, \"Note that MultiSelect value should always be an array of either \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"string\"), \" or \", mdx(\"strong\", {\n    parentName: \"p\"\n  }, \"null\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Incorrect, will have bugs\\n<MultiSelect data={[{ value: 1, label: '1' }]} value={[1]} />\\n\\n// Correct, works as expected\\n<MultiSelect data={[{ value: '1', label: '1' }]} value={['1']} />\\n\")), mdx(\"h2\", {\n    \"id\": \"data-prop\"\n  }, \"Data prop\"), mdx(\"p\", null, \"MultiSelect support two different data formats:\"), mdx(\"ol\", null, mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"An array of strings \\u2013 use when you do not need to customize item component or display \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"label\"), \" different than \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\")), mdx(\"li\", {\n    parentName: \"ol\"\n  }, \"An array of objects with required \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"value\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"label\"), \" properties and any other additional properties\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Data as an array of strings, will be mapped to\\n// [\\n//  { value: 'React', label: 'React' },\\n//  { value: 'Angular', label: 'Angular' },\\n//  { value: 'Svelte', label: 'Svelte' },\\n//  { value: 'Vue', label: 'Vue' },\\n// ]\\n<MultiSelect data={['React', 'Angular', 'Svelte', 'Vue']} />\\n\\n// Data as an array of objects:\\n// Minimal example (same as first example above)\\n<MultiSelect data={[\\n  { value: 'React', label: 'React' },\\n  { value: 'Angular', label: 'Angular' },\\n  { value: 'Svelte', label: 'Svelte' },\\n  { value: 'Vue', label: 'Vue' },\\n]} />\\n\\n// Additional data properties for custom item component (see documentation below)\\n<MultiSelect\\n  valueComponent={({ value, label, image, name }) => /* Your custom value component with data properties */}\\n  itemComponent={({ value, label, image, name }) => /* Your custom item component with data properties */}\\n  data={[\\n    {\\n      value: 'bob@handsome.inc',\\n      label: 'bob@handsome.inc',\\n      image: 'image-link',\\n      name: 'Bob Handsome',\\n    },\\n    {\\n      value: 'bill@outlook.com',\\n      label: 'bill@outlook.com',\\n      image: 'image-link',\\n      name: 'Bill Rataconda',\\n    },\\n    {\\n      value: 'amy@wong.cn',\\n      label: 'amy@wong.cn',\\n      image: 'image-link',\\n      name: 'Amy Wong',\\n    },\\n  ]}\\n/>\\n\")), mdx(\"h2\", {\n    \"id\": \"searchable\"\n  }, \"Searchable\"), mdx(\"p\", null, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"searchable\"), \" prop to enable search in select and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"nothingFound\"), \" prop to provide label that will be shown when no options were found:\"), mdx(Demo, {\n    data: MultiSelectDemos.searchable,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"clearable\"\n  }, \"Clearable\"), mdx(\"p\", null, \"Set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearable\"), \" prop to enable clearing all values at once.\\nWhen prop is true and at least value is selected clear button will replace chevron in right section:\"), mdx(Demo, {\n    data: MultiSelectDemos.clearable,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"large-data-set\"\n  }, \"Large data set\"), mdx(\"p\", null, \"When dropdown height is exceeded dropdown becomes scrollable, to change max-height set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"maxDropdownHeight\"), \" prop with value in px:\"), mdx(Demo, {\n    data: MultiSelectDemos.large,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"custom-item-component\"\n  }, \"Custom item component\"), mdx(\"p\", null, \"You can change select item component and filtering logic that is used in search.\\nTo do so you will need to:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Add extra props to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"data\"), \" objects\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Create \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"filter\"), \" function which determines whether item should be added to the search results\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"Provide \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"itemComponent\"), \" and \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"valueComponent\"), \" which will consume \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"data\"), \" objects\")), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Minimum data used in previous examples\\n[\\n  { value: 'react', label: 'React' },\\n  { value: 'ng', label: 'Angular' },\\n  { value: 'svelte', label: 'Svelte' },\\n  { value: 'vue', label: 'Vue' },\\n];\\n\")), mdx(\"p\", null, \"You can add any other fields to your data:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"[\\n  {\\n    value: 'bob@handsome.inc',\\n    image: 'image-link',\\n    label: 'bob@handsome.inc',\\n    name: 'Bob Handsome',\\n  },\\n  {\\n    value: 'bill@outlook.com',\\n    image: 'image-link',\\n    label: 'bill@outlook.com',\\n    name: 'Bill Rataconda',\\n  },\\n  { value: 'amy@wong.cn', image: 'image-link', label: 'amy@wong.cn', name: 'Amy Wong' },\\n];\\n\")), mdx(\"p\", null, \"Based on this data shape you can create custom \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"filter\"), \" function and \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemComponent\"), \":\"), mdx(Demo, {\n    data: MultiSelectDemos.users,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"custom-label-component\"\n  }, \"Custom label component\"), mdx(\"p\", null, \"Apart from \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"itemComponent\"), \" you can customize appearance of label by providing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"labelComponent\"), \":\"), mdx(Demo, {\n    data: MultiSelectDemos.countries,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"performance\"\n  }, \"Performance\"), mdx(\"p\", null, \"If you have a large data set (> 100 items) you will have to optimize items rendering.\\nThe best strategy is to use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"searchable\"), \" option with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"limit\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"// Only 20 items are rendered at a time\\n// See countries list example above\\n<MultiSelect searchable limit={20} />\\n\")), mdx(\"h2\", {\n    \"id\": \"animations\"\n  }, \"Animations\"), mdx(\"p\", null, \"By default dropdown animations are turned off to increase responsiveness.\\nYou can enable them by setting optional props:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"transition\"), \" \\u2013 premade transition name or custom transition styles object, see \", mdx(\"a\", {\n    parentName: \"li\",\n    \"href\": \"/core/transition/\"\n  }, \"Transition\"), \" component for all available options\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"transitionDuration\"), \" \\u2013 transition duration in ms, defaults to 0\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"transitionTimingFunction\"), \" \\u2013 defaults to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"theme.transitionTimingFunction\"))), mdx(Demo, {\n    data: MultiSelectDemos.transitions,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"with-icon\"\n  }, \"With icon\"), mdx(\"p\", null, \"You can use any React node as icon:\"), mdx(Demo, {\n    data: MultiSelectDemos.icon,\n    demoProps: {\n      zIndex: 4\n    },\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"invalid-state-and-error\"\n  }, \"Invalid state and error\"), mdx(Demo, {\n    data: MultiSelectDemos.validation,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"disabled-state\"\n  }, \"Disabled state\"), mdx(\"p\", null, \"In disabled state:\"), mdx(\"ul\", null, mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"options to remove, add or search is disabled\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"input cannot be cleared with clear button\"), mdx(\"li\", {\n    parentName: \"ul\"\n  }, \"cursor is changed to \", mdx(\"inlineCode\", {\n    parentName: \"li\"\n  }, \"not-allowed\"))), mdx(Demo, {\n    data: MultiSelectDemos.disabled,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"right-section\"\n  }, \"Right section\"), mdx(\"p\", null, \"You can replace icon in right section with \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"rightSection\"), \" prop.\\nNote that in this case \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearable\"), \" option will not work and will need to handle it yourself:\"), mdx(Demo, {\n    data: MultiSelectDemos.rightSection,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"input-props\"\n  }, \"Input props\"), mdx(\"p\", null, \"Component supports all props from \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/input/\"\n  }, \"Input\"), \" and \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/core/input-wrapper/\"\n  }, \"InputWrapper\"), \" components:\"), mdx(Demo, {\n    data: MultiSelectDemos.configurator,\n    mdxType: \"Demo\"\n  }), mdx(\"h2\", {\n    \"id\": \"get-element-ref\"\n  }, \"Get element ref\"), mdx(\"p\", null, \"You can get input ref by passing \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"elementRef\"), \" prop to Select component:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"import { useRef } from 'react';\\nimport { MultiSelect } from '@mantine/core';\\n\\nfunction Demo() {\\n  const ref = useRef(null);\\n  return <MultiSelect elementRef={ref} />;\\n}\\n\")), mdx(\"h2\", {\n    \"id\": \"server-side-rendering\"\n  }, \"Server side rendering\"), mdx(\"p\", null, \"Component uses \", mdx(\"a\", {\n    parentName: \"p\",\n    \"href\": \"/hooks/use-id/\"\n  }, \"use-id\"), \" hook to generate unique ids and aria- attributes,\\nprovide static \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"id\"), \" prop to prevent props mismatch:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<MultiSelect /> // -> random id generated both on client and server, props mismatch warning\\n<MultiSelect id=\\\"my-select\\\" /> // -> id is static, no mismatches\\n\")), mdx(\"h2\", {\n    \"id\": \"accessibility\"\n  }, \"Accessibility\"), mdx(\"p\", null, \"Provide \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"aria-label\"), \" in case you use component without label for screen reader support:\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<MultiSelect label=\\\"My select\\\" />; // -> ok, select and label is connected\\n<MultiSelect />; // not ok, select is not labeled\\n<MultiSelect aria-label=\\\"My select\\\" />; // -> ok, label is not visible but will be announced by screen reader\\n\")), mdx(\"p\", null, \"If you use \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearable\"), \" option set \", mdx(\"inlineCode\", {\n    parentName: \"p\"\n  }, \"clearButtonLabel\"), \":\"), mdx(\"pre\", null, mdx(\"code\", {\n    parentName: \"pre\",\n    \"className\": \"language-tsx\"\n  }, \"<MultiSelect clearable clearButtonLabel=\\\"Clear select field\\\" />\\n\")));\n}\n;\nMDXContent.isMDXComponent = true;"}},"pageContext":{"id":"70bae814-f31b-5dde-be7d-32f355c82eb0","slug":"core/MultiSelect","__params":{"slug":"core"}}},"staticQueryHashes":["2731172446","3701445061","655967936"]}